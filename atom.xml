<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title></title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2023-01-29T22:03:57+00:00</updated>
 <id></id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Exploring the Overlays Capture Architecture: Managing Data Captured from Temperature Sensors</title>
   <link href="/2023/01/29/Exploring-the-Overlays-Capture-Architecture/"/>
   <updated>2023-01-29T17:27:05+00:00</updated>
   <id>/2023/01/29/Exploring-the-Overlays-Capture-Architecture</id>
   <content type="html">&lt;p&gt;This article will look at how to parse OCA (Overlays Capture Architecture) from an Excel template and convert it into OCA Bundle, a zip archive file. We will also describe the files included in the zip archive and show how to read the meta.json file. Additionally, we will demonstrate how to verify the integrity of the OCA Bundle and validate the captured data. Finally, we will look at transforming the units of captured data from Celsius to Kelvin. By the end of this article, you will have a better understanding of the OCA system and how to work with OCA data.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To follow described OCA exploration, you will need the OCA Bundle file. To get one, you can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;generate it from the XLS template. To do this, download the prepared &lt;a href=&quot;https://data-vault.argo.colossi.network/api/v1/files/EsWbDUorzNF1wv2cryD_fToNDhax7APLVN3Q2EAxeqRU&quot;&gt;oca_bundle.xlsx&lt;/a&gt; file with defined OCA for capturing data from a temperature sensor. Then, the &lt;a href=&quot;https://oca.colossi.network/ecosystem/oca-parser.html&quot;&gt;OCA Parser&lt;/a&gt; is used to convert the XLS file into OCA Bundle as a zip archive. The command to do this is:
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./parser parse oca -p ./oca_bundle.xlsx --zip&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://data-vault.argo.colossi.network/api/v1/files/EukCvvhAim2elMtOMMIs3bwPf4fbvQzZswl3TyEGaNrA&quot;&gt;download&lt;/a&gt; pre-generated OCA Bundle file directly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In either case, once you have obtained an OCA Bundle, you can begin exploring the structure and contents of the bundle and working with the data contained in it.&lt;/p&gt;

&lt;h2 id=&quot;under-the-hood&quot;&gt;Under the hood&lt;/h2&gt;
&lt;p&gt;Let’s see what the generated zip archive contains:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip -l oca_bundle.zip&lt;/code&gt;
This will produce output similar to the following:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Archive:  oca_bundle.zip
  Length      Name
&lt;span class=&quot;nt&quot;&gt;---------&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;
      190   EmL-JD22a1RywPXzzZLAEOxR8NHSi-04pQnOhNwHG7sg.json
      277   EmYQZgAnoE_AIsOiZHL17jw7KGnYgY1pPRFfSUnVYUj0.json
      213   EATuKGoJosYKLyLvdNBXpFM2YeuKuzvthOHu08whWWmA.json
      275   meta.json
&lt;span class=&quot;nt&quot;&gt;---------&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;-------&lt;/span&gt;
      955   4 files
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The zip archive contains several JSON-formatted files, including overlays and capture base files, that comprise the OCA Bundle. Furthermore, there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta.json&lt;/code&gt; file, a JSON-formatted file containing information about the other files in the zip archive. This file can be used to navigate through the OCA Bundle and access the overlays and other data collected in the archive.&lt;/p&gt;

&lt;h2 id=&quot;reading-the-metajson-file&quot;&gt;Reading the meta.json file&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat meta.json&lt;/code&gt; will produce the following output:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;files&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;EmL-JD22a1RywPXzzZLAEOxR8NHSi-04pQnOhNwHG7sg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;character_encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmYQZgAnoE_AIsOiZHL17jw7KGnYgY1pPRFfSUnVYUj0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;unit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EATuKGoJosYKLyLvdNBXpFM2YeuKuzvthOHu08whWWmA&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmL-JD22a1RywPXzzZLAEOxR8NHSi-04pQnOhNwHG7sg&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;files&lt;/code&gt; attribute is a JSON object that maps the names of the overlays, bounded to capture base defined by a unique identifier (SAI) as key, and files to the SAI of the file within the OCA Bundle.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; value references the top-level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capture_base&lt;/code&gt; in the OCA Bundle. This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capture_base&lt;/code&gt; is the starting point for traversing OCA when it contains attributes that refer to other OCAs, but it’s not covered in this article. If you are interested in investigating this topic further, you can read more about &lt;a href=&quot;https://oca.colossi.network/specification/#attribute-type&quot;&gt;reference attribute type&lt;/a&gt; in the OCA documentation.&lt;/p&gt;

&lt;h2 id=&quot;verify-oca-bundle-integrity&quot;&gt;Verify OCA Bundle Integrity&lt;/h2&gt;
&lt;p&gt;The following code examples demonstrate how to verify the integrity of an OCA Bundle, a zip archive containing data captured by the Overlays Capture Architecture (OCA) system.&lt;/p&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;oca.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveFromZip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;oca.js-form-core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveFromZip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocaBundleFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { success: boolean, errors: string[] }&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oca_rust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;oca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oca_zip_resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve_from_zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolve_from_zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path/to/oca_bundle.zip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Result&amp;lt;(), Vec&amp;lt;Error&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The code uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolveFromZip&lt;/code&gt; method to load the OCA Bundle from the file system. This function returns an &lt;a href=&quot;#OCA-object-with-Form-and-Credential-overlays-ignored&quot;&gt;OCA object&lt;/a&gt; representing the OCA data in the zip archive. Then creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validator&lt;/code&gt; object to perform the validation. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; method of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validator&lt;/code&gt; is then called on the OCA object to perform the validation.&lt;/p&gt;

&lt;p&gt;In the JavaScript example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; method returns an object with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;success&lt;/code&gt; property, which indicates whether the validation was successful, and an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errors&lt;/code&gt; property, which is an array of error messages if the validation failed.
In the Rust example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; method returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Result&lt;/code&gt; object, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ok&lt;/code&gt; if the validation was successful, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Err&lt;/code&gt; with a vector of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; objects if the validation failed.&lt;/p&gt;

&lt;p&gt;In both cases, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validator&lt;/code&gt; object checks the OCA Bundle for any inconsistencies or errors, such as missing or invalid overlays, and returns information about any issues it finds. It allows users to ensure that the OCA Bundle is valid and can be used for accessing and analyzing the data.&lt;/p&gt;

&lt;h2 id=&quot;validating-captured-data&quot;&gt;Validating Captured Data&lt;/h2&gt;

&lt;p&gt;To validate the captured data, you need to use a tool like the &lt;a href=&quot;https://oca.colossi.network/ecosystem/oca-validator.html&quot;&gt;OCA Data Validator&lt;/a&gt;. This tool allows you to check that the data in a CSV file conforms to the structure and format defined in an OCA Bundle.&lt;/p&gt;

&lt;p&gt;To use the OCA Data Validator, you first need to &lt;a href=&quot;https://data-vault.argo.colossi.network/api/v1/files/E3AP34Xxh9zcAwwuw_zo4ixDCdoVHj3ML4LX5CwwF_8s&quot;&gt;download&lt;/a&gt; an example data file in CSV format. This file contains multiple rows of data, with each row representing a temperature measurement at a specific timestamp.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;timestamp,temperature
1607005200,22.7
1607005260,22.8
1607005320,22.9
1607005380,22.7
1607005440,22.8
...,...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you have downloaded the data file, you can use the OCA Data Validator to check that the data in the file conforms to the OCA Bundle. To do this, you must create a Validator instance, set the validation constraints, and then run the validation process on the data.&lt;/p&gt;

&lt;p&gt;Both the JavaScript and Rust examples below show how to do this. The code creates a Validator instance, sets the validation constraints, and checks that the data in the CSV file conforms to the OCA bundle. If any issues are found, an error will be returned.&lt;/p&gt;

&lt;p&gt;JavaScript:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CSVDataSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;oca-data-validator&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveFromZip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;oca.js-form-core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;csvtojson&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveFromZip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocaBundleFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;failOnAdditionalAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;path/to/data.csv&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oca_conductor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstraintsConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;data_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSVDataSet&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oca_zip_resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve_from_zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolve_from_zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path/to/oca_bundle.zip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set_constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstraintsConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fail_on_additional_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path/to/data.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_data_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;CSVDataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.delimiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Result&amp;lt;(), Vec&amp;lt;ValidationError&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the JavaScript code, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oca-data-validator&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oca.js-form-core&lt;/code&gt; packages are used to create a Validator instance and resolve the OCA Bundle. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csvtojson&lt;/code&gt; package is used to parse the CSV file into a JSON object, which is then passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; method on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validator&lt;/code&gt; instance to validate the data against the OCA Bundle.&lt;/p&gt;

&lt;p&gt;In the Rust code, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oca_conductor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oca_zip_resolver&lt;/code&gt; crates are used to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validator&lt;/code&gt; instance and resolve the OCA Bundle. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::fs&lt;/code&gt; module reads the CSV file’s contents into a String, which is then passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_data_set&lt;/code&gt; method on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validator&lt;/code&gt; instance. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; method is called on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validator&lt;/code&gt; instance to validate the data against the OCA Bundle.&lt;/p&gt;

&lt;h2 id=&quot;transforming-units-converting-from-celsius-to-kelvin&quot;&gt;Transforming Units: Converting from Celsius to Kelvin&lt;/h2&gt;
&lt;p&gt;Transforming units is a common task when working with data captured by sensors. In the case of temperature data, it may be necessary to convert from one unit of measurement to another. For example, you may need to convert from Celsius to Kelvin or vice versa.&lt;/p&gt;

&lt;p&gt;The following code demonstrates how to use the &lt;a href=&quot;https://oca.colossi.network/ecosystem/oca-transformer.html&quot;&gt;OCA Data Transformer&lt;/a&gt; to convert the units of captured data from Celsius to Kelvin.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Transformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CSVDataSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;oca-data-transformer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveFromZip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;oca.js-form-core&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;data.csv&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delimiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveFromZip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocaBundleFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Transformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addDataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CSVDataSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delimiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`
{
  &quot;attribute_units&quot;: {
    &quot;temperature&quot;: &quot;K&quot;
  },
  &quot;capture_base&quot;: &quot;E1ZVGMTH-A-E4jJ5HDM7Lkpwz822Fs4Sa4HNol7oGY9M&quot;,
  &quot;metric_system&quot;: &quot;SI&quot;,
  &quot;type&quot;: &quot;spec/overlays/unit/1.0&quot;
}
  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRawDatasets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The code reads the data from a CSV file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data.csv&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs&lt;/code&gt; module and stores the data in a variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;. The code also sets a delimiter for the CSV data, specifying the character used to separate the values in each row. In this case, the delimiter is a comma.&lt;/p&gt;

&lt;p&gt;The code then uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolveFromZip&lt;/code&gt; function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oca.js-form-core&lt;/code&gt; package to read the OCA Bundle from the specified zip archive file.&lt;/p&gt;

&lt;p&gt;Next, the code creates a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transformer&lt;/code&gt; instance and adds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSVDataSet&lt;/code&gt; instance that was created earlier to the transformer. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transformer&lt;/code&gt; instance is then used to transform the data in the OCA Bundle. In this case, the transformation is specified using a Unit overlay that defines the attribute units to be used for the temperature data (in this case, Kelvin).&lt;/p&gt;

&lt;p&gt;Finally, the code calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRawDatasets&lt;/code&gt; method on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transformer&lt;/code&gt; instance to retrieve the transformed data. This method returns the transformed data as an array of datasets, which can be accessed and used as needed.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-and-next-steps&quot;&gt;Conclusion and Next Steps&lt;/h2&gt;
&lt;p&gt;The OCA Bundle provides a number of benefits over more traditional methods of representing data. It enables the data from different sensors and devices to be easily combined and shared with other applications or systems, which can help to improve the interoperability and usefulness of the data. Additionally, the OCA Bundle provides a consistent and well-defined structure for representing sensor data, which can make it easier for developers to work with the data in their applications.&lt;/p&gt;

&lt;p&gt;There are many ways to continue exploring OCA and working with OCA data. One possible next step is to look at the &lt;a href=&quot;https://oca.colossi.network/specification/&quot;&gt;OCA specification&lt;/a&gt; in more detail and learn more about the different elements of OCA. Another potential direction is to experiment with different ways of accessing and working with OCA data, such as using the &lt;a href=&quot;https://www.npmjs.com/package/oca.js&quot;&gt;oca.js&lt;/a&gt; library, &lt;a href=&quot;https://crates.io/crates/oca-rust&quot;&gt;oca-rust&lt;/a&gt; crate or other &lt;a href=&quot;https://oca.colossi.network/ecosystem/tour.html&quot;&gt;tools&lt;/a&gt; and libraries that support OCA. Finally, you could explore the use of OCA in real-world applications, such as IoT systems or other scenarios where data is collected and shared. Regardless of which direction you choose to take, OCA provides a powerful and flexible framework for managing and working with data.&lt;/p&gt;

&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;
&lt;h4 id=&quot;oca-object-with-form-and-credential-overlays-ignored&quot;&gt;OCA object (with Form and Credential overlays ignored):&lt;/h4&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;capture_base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Numeric&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Text&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;classification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;digest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmL-JD22a1RywPXzzZLAEOxR8NHSi-04pQnOhNwHG7sg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;flagged_attributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spec/capture_base/1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;overlays&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attribute_character_encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;capture_base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmL-JD22a1RywPXzzZLAEOxR8NHSi-04pQnOhNwHG7sg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;default_character_encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;digest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmYQZgAnoE_AIsOiZHL17jw7KGnYgY1pPRFfSUnVYUj0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spec/overlays/character_encoding/1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attribute_units&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;capture_base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EmL-JD22a1RywPXzzZLAEOxR8NHSi-04pQnOhNwHG7sg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;digest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EATuKGoJosYKLyLvdNBXpFM2YeuKuzvthOHu08whWWmA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;metric_system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nonSI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;spec/overlays/unit/1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Mobile app content accessibility</title>
   <link href="/2022/11/21/mobile-app-content-accessibility/"/>
   <updated>2022-11-21T17:27:05+00:00</updated>
   <id>/2022/11/21/mobile-app-content-accessibility</id>
   <content type="html">&lt;p&gt;Nowadays, with the growth of technology and its usage in society, more and more stuff can be done with a tap on the screen. Shopping, ordering food, even taking a loan, all this is possible without leaving the home. Moreover, it’s a technological goal to make everyday situations done within a short period of time when simply sitting on a couch. However, when for most of the people can more or less easily access such an app, it is important to make it reachable to the group of people with disabilities.&lt;/p&gt;
&lt;h2 id=&quot;w3c-guide&quot;&gt;W3C guide&lt;/h2&gt;
&lt;p&gt;In its &lt;a href=&quot;https://www.w3.org/TR/mobile-accessibility-mapping/&quot;&gt;main document about mobile accessibility&lt;/a&gt; , W3C points out that mobile doesn’t only mean phones - other wearable and portable devices count here as well. But let us focus on the apps designed for what we always keep in our pockets. The organization has chosen four principles, that mobile applications designed to be approachable for the disabled should follow:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Perceivance -&lt;/strong&gt; Becoming aware of users’ incapacities, this part of the documents speaks of the screen size, zoom and contrast&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Operability -&lt;/strong&gt; Making the app work similarly well to the non-accessible version, this principle speaks about moving around the app with multiple gestures and screen control.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Understandability -&lt;/strong&gt; When making an app easier to access, it is also important to make it as easy to use, as possible. This section mentions the consistency of application layout.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Robustness -&lt;/strong&gt; Preparing an app for all the “damage” that can be done with e.g. inputs, this area of the document acknowledges ways of entering the data to the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us focus on each principle and present recomendations suggested by W3C for designing an mobile app.&lt;/p&gt;

&lt;h3 id=&quot;perceivance&quot;&gt;Perceivance&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Small screen limits the amount of information that can be shown to the user. It is important to minimize it in comparison with the desktop version. Focus on the most important ones.&lt;/li&gt;
  &lt;li&gt;When the amount of information has to stay the same, provide different rendering to make it as readable and accessible, as possible.&lt;/li&gt;
  &lt;li&gt;Decrease the need for zooming in.&lt;/li&gt;
  &lt;li&gt;When it comes to data forms, position the form fields below their labels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/20221121/iHRzjxf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User should be available to control app content size. OS-level features to handle it include setting defaut text size (in Display Settings), or magnifying entire screen/part of the screen under user’s fingers (available in Accessibility Settings)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/resize-text&quot;&gt;&lt;strong&gt;Success Criterion 1.4.4 Resize Text (Level AA):&lt;/strong&gt;&lt;/a&gt; Except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality.&lt;/li&gt;
  &lt;li&gt;It should be kept in mind that mobile phones can be used in different outdoor conditions and the readability of screen content may vary.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum&quot;&gt;&lt;strong&gt;Success Criterion 1.4.3 Contrast (Minimum) (Level AA):&lt;/strong&gt;&lt;/a&gt;  The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. In practice, it means that the difference in color between text and its background should be big enough for the text to be accessible for by people with moderately low vision (who do not use contrast-enhancing assistive technology).
&lt;strong&gt;Contrast of 1.45:1 :&lt;/strong&gt;
&lt;img src=&quot;/static/img/20221121/HHr2Iii.png&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;Contrast of 4.84:1 :&lt;/strong&gt;
&lt;img src=&quot;/static/img/20221121/OGLhcWe.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced&quot;&gt;&lt;strong&gt;Success Criterion 1.4.6 Contrast (Enhanced) (Level AAA):&lt;/strong&gt;&lt;/a&gt; The visual presentation of text and images of text has a contrast ratio of at least 7:1
&lt;strong&gt;Contrast of 8.3:1 :&lt;/strong&gt;
&lt;img src=&quot;/static/img/20221121/7FKkbTo.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;operability&quot;&gt;Operability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The advantage of mobile phones is that the keyboard, not being physical, is only visible when focused on some input. It is important to make it as accessible as possible, including a support for an external physical keyboard or alternative input ways.&lt;/li&gt;
  &lt;li&gt;People with visual disabilities can benefit from some characteristics of physical keyboards over touchscreen keyboards&lt;/li&gt;
  &lt;li&gt;People with physical disabilities, can benefit from keyboards optimized to minimize inadvertent presses&lt;/li&gt;
  &lt;li&gt;Some people can be confused by the dynamic nature of the digital keyboard and may prefer the physical one.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html&quot;&gt;&lt;strong&gt;Success Criterion 2.1.1 Keyboard (Level A):&lt;/strong&gt;&lt;/a&gt; All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user’s movement and not just the endpoints. This means the keyboard interface is being used and the usage of alternate keyboard is possible. E.g. a blind person is not able to use the mouse input, or any other one that requires mouse-hand coordination.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/no-keyboard-trap&quot;&gt;&lt;strong&gt;Success Criterion 2.1.2 No Keyboard Trap (Level A):&lt;/strong&gt;&lt;/a&gt; If keyboard focus can be moved to a component of the page using a keyboard interface, then focus can be moved away from that component using only a keyboard interface, and, if it requires more than unmodified arrow or tab keys or other standard exit methods, the user is advised of the method for moving focus away. E.g. user can move through the calendar tabbing through its content.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/focus-order&quot;&gt;&lt;strong&gt;Success Criterion 2.4.3 Focus Order (Level A):&lt;/strong&gt;&lt;/a&gt; If a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability. This means order of the sequential information should be consistent with with focus order.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/focus-visible&quot;&gt;&lt;strong&gt;Success Criterion 2.4.7 Focus Visible (Level AA):&lt;/strong&gt;&lt;/a&gt; Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. The app developer should help the user know which element has the keyboard focus. ‘
&lt;img src=&quot;/static/img/20221121/NIAxAx3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interactive elements on the screen should be big enough and spaced widely enough not to be tapped by accident when wanting to perform other action. Best practices recommend ensuring that touch targets are at least 9 mm high by 9 mm wide (which is around 48x48dp) and surrounded by a small amount of inactive space.
&lt;img src=&quot;/static/img/20221121/BsFgFlL.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In the age of multiple screen gestures, it important to make them as simple as possible. For people with some disabilities who e.g. use a stylus, some gestures might be hard to perform. Another thing is that some instructions on how to use provided gestures can be useful.&lt;/li&gt;
  &lt;li&gt;Be careful of device manipulation gestures - when shaking or tilting the phone may not be a hard action to perform, it can be a challenge for users with disabilities.&lt;/li&gt;
  &lt;li&gt;Buttons should be easily accessible, e.g. with a move of thumb, no matter left or right hand.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;understandability&quot;&gt;Understandability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Some users have their devices fixed in a particular position, e.g. when mounted to a wheelchair. Developers should try to support both portrait and landscape orientation of an app. Moreover, changes in orientation should be signalled if the user is utilizing the screen reader.&lt;/li&gt;
  &lt;li&gt;Consistency of layout is essential. If an element is repeated throughout a screens, its position should be fixed and the same on all of them. Order of reappearing elements should also be equal.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/consistent-navigation&quot;&gt;&lt;strong&gt;Success Criterion 3.2.3 Consistent Navigation (Level AA):&lt;/strong&gt;&lt;/a&gt; Navigational mechanisms that are repeated on multiple Web pages within a set of Web pages occur in the same relative order each time they are repeated, unless a change is initiated by the user. E.g. Iindividuals with low vision who use screen magnification to display a small portion of the screen at a time often use visual cues and page boundaries to quickly locate repeated content.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/consistent-identification&quot;&gt;&lt;strong&gt;Success Criterion 3.2.4 Consistent Identification (Level AA):&lt;/strong&gt;&lt;/a&gt; Components that have the same functionality within a set of Web pages are identified consistently. People who use screen readers use when operating a rely heavily on their familiarity with functions that may appear on different Web pages. If identical functions have different labels (or, more generally, a different accessible name) on different Web pages, the site will be considerably more difficult to use.&lt;/li&gt;
  &lt;li&gt;Most important piece of information should be visible without scrolling&lt;/li&gt;
  &lt;li&gt;Elements that perform the same actions should not be duplicated.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context&quot;&gt;&lt;strong&gt;Success Criterion 2.4.4 Link Purpose (In Context) (Level A):&lt;/strong&gt;&lt;/a&gt; The purpose of each link can be determined from the link text alone or from the link text together with its programmatically determined link context, except where the purpose of the link would be ambiguous to users in general.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-link-only&quot;&gt;&lt;strong&gt;Success Criterion 2.4.9 Link Purpose (Link Only) (Level AAA):&lt;/strong&gt;&lt;/a&gt; A mechanism is available to allow the purpose of each link to be identified from link text alone, except where the purpose of the link would be ambiguous to users in general.&lt;/li&gt;
  &lt;li&gt;Elements that trigger changes should be easily distinguishable from non-actionable elements. They should also be recognizable by screen readers. Examples of distinguishing features include providing a conventional shape, style or positioning, color offset and widely known iconography.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://&quot;&gt;&lt;strong&gt;Success Criterion 3.3.2 Labels or Instructions (Level A):&lt;/strong&gt;&lt;/a&gt; Labels or instructions are provided when content requires user input. It helps to ensure the user will understand how to access the input and what to in there.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/help&quot;&gt;&lt;strong&gt;Success Criterion 3.3.5 Help (Level AAA):&lt;/strong&gt;&lt;/a&gt; Context-sensitive help is available. Users with disabilities may be more likely to make mistakes than users without disabilities. Using context-sensitive help, users find out how to perform an operation without losing track of what they are doing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;robustness&quot;&gt;Robustness&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Setting the type of keyboard helps prevent errors and ensures formats are correct. However, it can be confusing for people who are using a screen reader when there are subtle changes in the keyboard.&lt;/li&gt;
  &lt;li&gt;The need for text entry should be reduced. Provide select menus, radio buttons, check boxes or by automatically entering known information (e.g. date, time, location).&lt;/li&gt;
  &lt;li&gt;Support the platform characteristic features defined in accessibility settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;accessibility-in-practice&quot;&gt;Accessibility in practice&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Accessibility settings -&lt;/strong&gt; Main place for all accessibility features available on both Android and iOS. It allows for control of visual, auditory and motor aids on the device.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/static/img/20221121/1qJrIKj.gif&quot; width=&quot;300&quot; style=&quot;display: inline;&quot; /&gt;
  &lt;img src=&quot;/static/img/20221121/z2N4yhA.gif&quot; width=&quot;300&quot; style=&quot;display: inline;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;As it has been mentioned by W3C, the text size and contrast remain a very important criterium when developing an accessible app. From the accessibility settings, user can select larger text size, enhance the contrast or even choose a color-corrected display for partial color blindness. However, it only affects the visible colors, not the real colors and the change is not visible on a screenshot.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Screen reader -&lt;/strong&gt; One of the most important features for people with impaired vision. It reads the content of the screen to the user and is available from the phone’s accessibility settings, no need for downloading an app. It goes under a name TalkBack on Android and VoiceOver on iOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/static/img/20221121/m1bJue4.png&quot; width=&quot;300&quot; style=&quot;display: inline;&quot; /&gt;
  &lt;img src=&quot;/static/img/20221121/w9go2Ys.png&quot; width=&quot;300&quot; style=&quot;display: inline;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;TalkBack/VoiceOver proves the importance of good input fields labelling, decreasing the amount of information on one screen and intuitive layout. With such proper sign, the operation of screen reader is more simplified.
The screen reader settings also allow the user to configure a Braille keyboard. But what does it look like, if the widely known Braille focuses on touch? Well, the Braille keyboard on mobile takes entire screen and shows six dots which, with some help of the screen reader allow for the input.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/static/img/20221121/iU084pG.png&quot; width=&quot;71%&quot; style=&quot;display: inline;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2AdRFFkE9cI&amp;amp;ab_channel=gallagher123123&quot;&gt;Here&lt;/a&gt; is a video on how the TalkBack screen reader is used as well as the Braille input.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Switch access -&lt;/strong&gt; It allows for the device to be controlled by a physical switch. Provides a way of input and phone handling for people with motion impairement. Available natively on both Android and iOS under the accessibility settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;/static/img/20221121/8FPQJxb.png&quot; width=&quot;300&quot; style=&quot;display: inline;&quot; /&gt;
  &lt;img src=&quot;/static/img/20221121/NrwRorH.png&quot; width=&quot;300&quot; style=&quot;display: inline;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This feature exploits the understandability criterium, recommend by W3C. Switch access might be used by people with serious enough mobility issues to be put on a wheelchair, where the phone would be in a fixed position and orientation. Moreover, if the app layout repeats on a few screens, a person using a switch will be able to move around the app much faster.
Below is an official Google video showing a short explanation of switch access feature. For more tutorials visit &lt;a href=&quot;https://support.google.com/accessibility/android/answer/6122836?hl=en&quot;&gt;Google support page&lt;/a&gt;.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
      &lt;a href=&quot;https://www.youtube.com/watch?v=rAIXE6ilRQ0&quot;&gt;
         &lt;img src=&quot;https://img.youtube.com/vi/rAIXE6ilRQ0/0.jpg&quot; style=&quot;width:70%;&quot; /&gt;
      &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;flutter-and-encoded-accessibility&quot;&gt;Flutter and “encoded” accessibility&lt;/h2&gt;
&lt;p&gt;Another important concept is whether it is possible to somehow encode a desire for accessibility in an app. When the user interface of an app is divided into template and layout overlays, first of them containing widgets arrangement while the other one the widgets themselves with their args, the question is, is it achievable to impose on them both third, accessibility overlay? Let us present a few possible solutions considering flutter as a app programming language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Acessibility overlay idea #1&lt;/strong&gt; - For some requirements it would be possible to inject them into the widget tree combining not two but THREE overlays. Considering using &lt;a href=&quot;https://pub.dev/packages/json_dynamic_widget&quot;&gt;json_dynamic_widget&lt;/a&gt; as a widget tree builder and some own code for merging two JSONs into package-readable one, the third JSON aka accessibility overlay would have to be injected into layout overlay JSON. Let us consider some particular requirements:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Label positioning - This one is possible to impose, with some constraints. What is not known from the TextFormField widget and its arguments itself is whether the developer has put the field in a column/row with a text description, &lt;em&gt;fake label&lt;/em&gt;. Below is an example of a JSON describing a text_form_field.&lt;/p&gt;

        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text_form_field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;decoration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;hintText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;labelText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;First Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;If a developer has put a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hintText&lt;/code&gt; there, but no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;labelText&lt;/code&gt;, code that merges the overlays could put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hintText&lt;/code&gt; value for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;labelText&lt;/code&gt;. Not a perfect solution, since label should be a definite word describing input, while hint should be providing an example for an input, but when a hintText says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Your name, e.g. John&lt;/code&gt;, such label text would be enough to understand. If a developer has put a fake label above a TextFormField, that would be more difficult, but the merger could check for a widget “next to” the TextFormField. ONLY if they remain in the same row/column. But what if they do not?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;keyboard type - robustness criterium to provide e.g. numeric keyboard when a PIN input is wanted. Again, having in mind a Flutter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextFormField&lt;/code&gt; widget, it can define a keyboard type using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyboardType&lt;/code&gt; attribute:
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text_form_field&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;first_name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;keyboardType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;phone&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;Easy to inject as well. Merging code could easily impose a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyboardType&lt;/code&gt; arg if it has not been provided. BUT what kind of keyboard type? Accessibility recommendation is that a specific input is provided for some fields like phone number. No doubts about that, for people using switch access it would be much faster to switch through 9 numbers that wait for the right number on the qwerty keyboard to show. The proposal is to provide it. However, the input type depends on the form data themselves. It is not possible to do something like this for accessibility overlay:&lt;/p&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accessibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text_form_field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;keyboardType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;This way, what can be achieved is a necessity to provide a keyboard type. But the type itself would have to be read e.g. from a label - if it says ‘phone’, go for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;keyboardType&quot; : &quot;phone&quot;&lt;/code&gt;. ‘email address’? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;keyboardType&quot; : &quot;emailAddress&quot;&lt;/code&gt;. But what if the label says something completely different, like PESEL evidential number? Merging code would have to be programmed to read this as a numeric input. Moreover, it is not possible to just copy the label as a keyboard type. Email being a great example for this one.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Link purpose - Is it even possible to define this one? The AAA criterium says that every link text should define link purpose. Considering such a situation - the developer is making an app about birds. Each screen is a name, photo and short description of a bird. App is accessible, contrast is 8.5:1, font is large. At the bottom of each screen there is a smaller &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source of information&lt;/code&gt; text, which serves as a link to a Wikipedia page about each bird. And this is perfectly fine, screen reader would read this as “Source of information. Double tap to activate” or something similar, the user would know how to follow it. But is it achievable to enforce a understandable link text? Let us start with the fact that it is UNKNOWN whether a text is a link - Flutter has no link widget, and a simple way to provide a link text would look like &lt;a href=&quot;https://stackoverflow.com/questions/43583411/how-to-create-a-hyperlink-in-flutter-widget&quot;&gt;this&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url_launcher&lt;/code&gt; package required):
        &lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;InkWell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Open Browser'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;onTap:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://docs.flutter.io/flutter/services/UrlLauncher-class.html'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;It is not desirable to impose something on each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InkWell&lt;/code&gt; widget as none of them have to be links. But hypothetically, considering there exists a link widget, how can it be forced to say “Source of information” instead of e.g. “x”? Only when it is known that the screen is responsible of information about birds and if a link occurs, it is a source of information on Wikipedia. Such hypothetical accessibility overlay could look like this:&lt;/p&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accessibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;link_widget&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Source of information&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Focus visible - a criterium that actually could be imposed by an accessibility layout. Not in the best possible way, hovever. This one mentions that a focused field (let us talk about a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextFormField&lt;/code&gt; again…) should be easily distinguished from a non-focused one. Luckily, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextFormField&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputDecoration&lt;/code&gt; has a field called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;focusedBorder&lt;/code&gt;, which defines a border, that is shown when the field is focused. Accessiblity overlay could force that a border width, when the field is not fucused would be 1 and when focused, 3. It would enable the user to distinguish between the states of the text field:
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accessibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text_form_field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;decoration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;focusedBorder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;borderSide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;border&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;borderSide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;This way color of none of the borders would be defined, but the difference between focused and unfocused state would be imposed.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Interactive elements size - Luckily, when it comes to buttons (but buttons only!) Flutter provides a way to define their size. Each of the button classes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ElevatedButton&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutlinedButton&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TextButton&lt;/code&gt;) has an attribute called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimumSize&lt;/code&gt;:
        &lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ElevatedButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;onPressed:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;child:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;style:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElevatedButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;styleFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;minimumSize:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;This way, an accessibility overlay can enforce a minimum size of a button:&lt;/p&gt;
        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accessibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elevated_button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;minimumSize&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;However it is crucial to keep in mind that buttons are not the only elements that are interactive.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accessibility overlay would for sure be a step forward, but there are situations where automatic imposing of some accessibility recommendations would not be possible and human verification would be crucial.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Overlay parser -&lt;/strong&gt; Not a overlay itself, this last chance solution would be checking whether the designed layout meets accessibility requirements, not imposing them.  This should be treated as a “fun fact” and a workaround, not a definite solution.
    &lt;ul&gt;
      &lt;li&gt;Color contrast - What is necessary to find the contrast between two colored items is the tint of both child and parent widget, for entire widget. While not impossible, it would impose a requirement of iterating through all widgets and developing some contrast checking code.
        &lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widgetTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contrast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkContrast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contrast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//App very accessible&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contrast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//App accessible&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//App not accessible&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Label positioning - Label of a TextFormField should be positioned above the field, not next to it. Actually, there is no need of an artificial label at all. TextFormField has a field called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decoration&lt;/code&gt; which can contain the label itself:
        &lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;TextFormField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;decoration:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputDecoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;icon:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Icons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;hintText:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'What do people call you?'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;labelText:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Name'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;So it would be necessary to just check whether all the widget tree elements that are of type TextFormField contain labelText.&lt;/p&gt;
        &lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widgetTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTextFormField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsLabelText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//App accessible&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessible&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;And the list can go on and on. Let us stop with these 2 examples as this idea is just a workaround, not a real solution.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;accessibility-overlay-proposal&quot;&gt;Accessibility overlay proposal&lt;/h2&gt;
&lt;p&gt;Summing up the points about encoded accessibility and W3C guide, the JSON shown in this part of the article could serve as an accessibility overlay. It is important to keep in mind that many of the requirements proposed by W3C cannot be machine-imposed. A lot of them require some context to be understood, like link text or keyboard type.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accessibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;elevated_button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;minimumSize&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text_form_field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;decoration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;focusedBorder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;borderSide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;border&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;borderSide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Accessibility overlay could serve an important purpose for both disabled people and app developers. Without further research, app creators would be able to adjust their content to some special needs. No matter how easy this sounds, the real task is actually much more difficult. First of all, the list created by W3C is just a requirement guide. Actual people with disabilities may have other, individual wishes, that are not on the list. Such briefs or proposed here solutions are made by people who do not use them. It would be advised to consult accessibility solutions with people who would be their users, who need the app adjusted to their needs. Moreover, as stated before, some of the solutions for accessibility overlay require context of the field. Keyboard type or link text has to be imposed basing on their surroundings, which may be hard or even impossible to get by a machine. Another important thing is the operating system of a device. Actually it is absolutely stunning that both mobile ecosystems have so many native solutions for accessibility, that allow numerous disabled people to use their products with greater comfort (or even be able to use them at all). However, for desktops, the accessibility features may look completely different. Overlays should be able to distinct between mobile and stationary device, which requires at least two accessibility overlays for one app. To sum up, it would be both beneficial and really hard to create a solution that would successfully impose amenities for the disabled on the app creation.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;Picture references: &lt;a href=&quot;https://www.google.com/url?sa=i&amp;amp;url=https%3A%2F%2Fdisabilityinsider.com%2F2020%2F04%2F10%2Ftechnology%2Fgoogle-introduces-new-braille-keyboard-for-android%2F&amp;amp;psig=AOvVaw1uzDMSVyR6fXwkBVJyyc2G&amp;amp;ust=1666432368107000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CA0QjRxqFwoTCIDV2dGG8foCFQAAAAAdAAAAABAN&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://www.pngegg.com/en/png-dkhhk&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://www.pngegg.com/en/png-bzpfz&quot;&gt;3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://webaim.org/resources/contrastchecker/&quot;&gt;Contrast checking website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.flutter.dev/flutter/material/TextFormField-class.html&quot;&gt;Label positioning example&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Flutter and Rust combined. Creating a plugin to support various operating systems</title>
   <link href="/2022/09/26/flutter-and-rust-combined-creating-a-plugin-to-support-various-operating-systems/"/>
   <updated>2022-09-26T17:27:05+00:00</updated>
   <id>/2022/09/26/flutter-and-rust-combined-creating-a-plugin-to-support-various-operating-systems</id>
   <content type="html">&lt;p&gt;Both, Flutter and Rust are pretty novel technologies in the industry. Both also introduce a paradigm shift of how to approach portability, a very old and diffcult problem to solve. Portability is diffcult due to lack of common denominator across platforms, devices and operating systems. To achieve it, Flutter comes with a concept of &lt;a href=&quot;https://docs.flutter.dev/development/platform-integration/platform-channels&quot;&gt;MethodChannel&lt;/a&gt;, a cross-boundary interface that allows to write and call platform native code. It then enables seamless integrations that are essential when working with Operating System specific user interface or natively accessing device peripherals. No more tweaks thanks to proper integration mechanisms. Rust, on the the other hand, is getting traction in various ecosystems and there are at least several reasons why it becomes more and more popular as general purpose programming language. Rust is in essence a C-based language with novel concepts and modern tooling supporting the language. It has steep learning curve due to the architectural decisions baked in into the language. However once it is overcame it pays off. One especially interesing characteristic of the language is its adaptability in almost any environment. As a C-based language, program written in Rust can be exposed as a binary to many modern Operating Systems. Not only that, thanks to &lt;a href=&quot;https://en.wikipedia.org/wiki/Foreign_function_interface&quot;&gt;Foreign Function Interface (FFI)&lt;/a&gt; integration possibilities of Rust-based code, it became viable alternative to write platform agnostic code and expose it through FFI. In other words one Rust library can be consumed by any other C-based language. The core business logic is then encapsulated into one library that is later consumed within platform specific languages.&lt;/p&gt;

&lt;p&gt;This post guides the reader how to benefit from Flutter and Rust collaboration in a best form. When native programming lanugages available in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FlutterMethodChannel&lt;/code&gt; don’t come in handy, &lt;a href=&quot;https://pub.dev/packages/flutter_rust_bridge&quot;&gt;flutter_rust_bridge&lt;/a&gt; might be the solution. It allows the use of Rust code in Flutter application through an externally generated library. This tutorial however will not be introducing to the usage of the plugin. It assumes the user is familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_bridge&lt;/code&gt; &lt;a href=&quot;http://cjycode.com/flutter_rust_bridge/&quot;&gt;documentation&lt;/a&gt; and knows the basics. Moreover, to build for iOS and MacOS it is necessary to have access to Xcode and MacOS device. To build for Windows, Windows OS is needed as well. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_bridge&lt;/code&gt; provided tutorial for Android + Rust plugin so it will not be covered here.&lt;/p&gt;

&lt;p&gt;A proof of concept plugin can be found &lt;a href=&quot;https://github.com/argonAUTHs/flutter_rust_plugin&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;initial-steps&quot;&gt;Initial steps&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;In the root folder of your project create a new directory. It will be later referred here as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rust_part&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo init&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rust_part&lt;/code&gt;. This will create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder there is one file: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.rs&lt;/code&gt;. It can be deleted. Create 2 new files called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib.rs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api.rs&lt;/code&gt;. The first one will call all modules from rust project while the other is a module containing all functions that should be bridged to dart.&lt;/li&gt;
  &lt;li&gt;Modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api.rs&lt;/code&gt; file and add your library functionality. In this case it will be a simple hello world string function:
    &lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib.rs&lt;/code&gt; file:
    &lt;pre&gt;&lt;code class=&quot;language-rust=&quot;&gt;pub mod api;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the following lines to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; (Notice: The lib lines may change depending on the platform you are building for. ):
    &lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;nn&quot;&gt;[lib]&lt;/span&gt;
 &lt;span class=&quot;py&quot;&gt;crate-type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;staticlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cdylib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

 &lt;span class=&quot;nn&quot;&gt;[dependencies]&lt;/span&gt;
 &lt;span class=&quot;py&quot;&gt;flutter_rust_bridge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the following commands in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rust_part&lt;/code&gt;:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;flutter_rust_bridge_codegen
 flutter pub add &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt; ffigen
 flutter pub add ffi
 flutter pub add flutter_rust_bridge
 cargo &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cargo-xcode
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Cross compiling targets setup will not be covered here. For more information on the topic please check the recommended &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_bridge&lt;/code&gt; documentation (&lt;a href=&quot;http://cjycode.com/flutter_rust_bridge/template/setup_android.html&quot;&gt;here&lt;/a&gt; is an example of Android target setup).&lt;/li&gt;
  &lt;li&gt;The Rust part is ready to be built. For different targets use:
    &lt;ul&gt;
      &lt;li&gt;For Android: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo ndk -o ../android/src/main/jniLibs build --release&lt;/code&gt;. This command results in two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;librust_part.so&lt;/code&gt; files for two Android architectures.&lt;/li&gt;
      &lt;li&gt;For Windows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo build --release&lt;/code&gt; (has to be executed on Windows OS) . &lt;strong&gt;Important:&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crate-type&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; has to be changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dylib&quot;&lt;/code&gt;. In folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rust_part/target/release&lt;/code&gt; you will find files called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rust_part.dll&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rust_part.dll.lib&lt;/code&gt;. Remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dll&lt;/code&gt; part from the second one and the Windows files are ready.&lt;/li&gt;
      &lt;li&gt;For iOS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo lipo&lt;/code&gt;. In folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rust_part/target/universal/release&lt;/code&gt; you will find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;librust_part.a&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;For MacOS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo build --release&lt;/code&gt; (has to be executed on Windows OS) . &lt;strong&gt;Important:&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crate-type&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; has to be changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dylib&quot;&lt;/code&gt;. In folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rust_part/target/release&lt;/code&gt; you will find file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;librust_part.dylib&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ios&quot;&gt;iOS&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure you created support for iOS in your project with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter create --platform=ios .&lt;/code&gt;
&lt;strong&gt;Warning:&lt;/strong&gt; This command will create all files that are automatically created when making new Flutter project. If for some reason you deleted some of them, you might need to get rid of them again.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo xcode&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rust_part&lt;/code&gt;. This will create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt; file. This file will be soon opened in Xcode to change symbol stripping method.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo lipo&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rust_part&lt;/code&gt;. To specify target, run with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p $target&lt;/code&gt; flag. To build a release library (smaller in size), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--release&lt;/code&gt; flag.&lt;/li&gt;
  &lt;li&gt;Next, run the generator: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_bridge_codegen --rust-input $rust_part/src/api.rs --dart-output lib/bridge_generated.dart --c-output ios/bridge_generated.h&lt;/code&gt;
Actually, the location of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge_generated.h&lt;/code&gt; is not that important, as it is created only to have its content appended to another file.&lt;/li&gt;
  &lt;li&gt;Then create a symbolic link in iOS folder to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.a&lt;/code&gt; library: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ln -s ../$rust_part/target/universal/release/librust_part.a&lt;/code&gt;
You may also move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.a&lt;/code&gt; file to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ios&lt;/code&gt; folder, this way there is no need for the symlink as the library is directly accessible.&lt;/li&gt;
  &lt;li&gt;Then append the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge_generated.h&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ios/Classes/$Plugin.h&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat ios/bridge_generated.h &amp;gt;&amp;gt; ios/Classes/$Plugin.h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then add in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ios/Classes/.swift&lt;/code&gt; file dummy method:
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dummyMethodToEnforceBundling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// This will never be executed&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;dummy_method_to_enforce_bundling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Next, edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;podspec&lt;/code&gt; file and add the following lines:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  s.public_header_files = 'Classes**/*.h'
  s.static_framework = true
  s.vendored_libraries = &quot;**/*.a&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Next, remember to set the strip style to non global symbols on both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rust_part&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeworkspace&lt;/code&gt; in example (if you want to run the example).&lt;/li&gt;
  &lt;li&gt;Remember to edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt; file so it has following structure:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platforms&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.example.flutter_rust_plugin&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pluginClass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;FlutterRustPlugin&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pluginClass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;FlutterRustPlugin&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pluginClass&lt;/code&gt; here for iOS stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.h&lt;/code&gt; file in Classes folder.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ios-troubleshooting&quot;&gt;iOS Troubleshooting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; in ios folder with Runner (helps with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module not found&lt;/code&gt; error in Xcode)&lt;/li&gt;
  &lt;li&gt;to run a different dart file than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.dart&lt;/code&gt; edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLUTTER_TARGET&lt;/code&gt; in Xcode in Runner Build Settings.&lt;/li&gt;
  &lt;li&gt;check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iOS Deployment Target&lt;/code&gt;, 9.0 might be too old for some releases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macos&quot;&gt;MacOS&lt;/h2&gt;
&lt;p&gt;This tutorial is made for a multiplatform project and it assumes the iOS support is already working.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add support for MacOS in your project by executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter create --platform=macos .&lt;/code&gt;
&lt;strong&gt;Warning:&lt;/strong&gt; This command will create all files that are automatically created when making new Flutter project. If for some reason you deleted some of them, you might need to get rid of them again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To link your Rust library with MacOS, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dylib&lt;/code&gt; file type is necessary. To generate it, edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt;, so that it has following structure:
    &lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;nn&quot;&gt;[lib]&lt;/span&gt;
 &lt;span class=&quot;py&quot;&gt;crate-type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;dylib&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo build&lt;/code&gt; in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$crate&lt;/code&gt; directory. Remember to use the flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--release&lt;/code&gt; to make the lib much smaller.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Move your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dylib&lt;/code&gt; file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macos&lt;/code&gt; folder in your project.&lt;/li&gt;
  &lt;li&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.swift&lt;/code&gt; file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macos/Classes&lt;/code&gt; add the dummy method (more about it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_bridge&lt;/code&gt; documentation):
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dummyMethodToEnforceBundling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// This will never be executed&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;dummy_method_to_enforce_bundling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Don’t forget to edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt; and add the MacOS support:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;platforms&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;macos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
         &lt;span class=&quot;na&quot;&gt;pluginClass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;FlutterRustPlugin&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; file and add following lines:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; s.vendored_libraries = &quot;**/*.dylib&quot;
 s.public_header_files = 'Classes**/*.h'
 s.static_framework = true
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge_generated.h&lt;/code&gt; file from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ios&lt;/code&gt; folder to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macos/Classes&lt;/code&gt;. This file has been generated when enabling support for iOS. To generate it, run: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_bridge_codegen --rust-input $rust_part/src/api.rs --dart-output lib/bridge_generated.dart --c-output macos/Classes/bridge_generated.h&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;macos-troubleshooting&quot;&gt;MacOS Troubleshooting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;If you run into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no such module&lt;/code&gt; error while running the example, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example/macos&lt;/code&gt; folder in project and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; in the command line. This installs the missing module.&lt;/li&gt;
  &lt;li&gt;If during testing the example you run into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cannot find 'dummy_method_to_enforce_bundling' in scope&lt;/code&gt;, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod update&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For other errors, try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod deintegrate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; to reinstall pods.&lt;/li&gt;
  &lt;li&gt;Try deleting all folders from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/&amp;lt;your username&amp;gt;/Library/Developer/Xcode/DerivedData&lt;/code&gt; and cleaning your build folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;
&lt;p&gt;This part of the tutorial assumes the user has generated library files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dll&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.lib&lt;/code&gt; as described in Initial steps.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If your plugin project does not have Windows support activated, execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter create --platform=windows&lt;/code&gt; in project root folder:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This command will create all files that are automatically created when making new Flutter project. If for some reason you deleted some of them, you might need to get rid of them again.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make a new folder under created in previous point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows&lt;/code&gt; directory, let us refer to it by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$crate&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Place the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dll&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.lib&lt;/code&gt; files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$crate&lt;/code&gt; directory and change their names to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$crate.dll&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$crate.lib&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$crate&lt;/code&gt; directory create a new file, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;. Append the following lines to the file:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; include(../../cmake/$crate.cmake)

 set_property(TARGET ${CRATE_NAME} PROPERTY IMPORTED_LOCATION &quot;${CMAKE_CURRENT_SOURCE_DIR}/$crate.dll&quot;)
 set_property(TARGET ${CRATE_NAME} PROPERTY IMPORTED_IMPLIB &quot;${CMAKE_CURRENT_SOURCE_DIR}/$crate.lib&quot;)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The included &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$crate.cmake&lt;/code&gt; file will be created in the next steps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In your root folder, create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmake&lt;/code&gt; directory.&lt;/li&gt;
  &lt;li&gt;Under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmake&lt;/code&gt; directory create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$crate.cmake&lt;/code&gt; file. Append the following lines to the file:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; message(&quot;-- Linking Rust&quot;)
 set(CRATE_NAME &quot;$crate&quot;)
 set(CRATE_NAME ${CRATE_NAME} PARENT_SCOPE)
 if(CRATE_STATIC)
   add_library(${CRATE_NAME} STATIC IMPORTED GLOBAL)
 else()
   add_library(${CRATE_NAME} SHARED IMPORTED GLOBAL)
 endif()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmake&lt;/code&gt; directory create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.cmake&lt;/code&gt; file. Append the following lines to the file:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; add_subdirectory($crate)
 target_link_libraries(${PLUGIN_NAME} PRIVATE ${CRATE_NAME})
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows/CMakeLists.txt&lt;/code&gt; file. Add the following lines:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; include(../cmake/main.cmake)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Put this line after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_link_libraries&lt;/code&gt; line.&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# List of absolute paths to libraries that should be bundled with the plugin.
# This list could contain prebuilt libraries, or libraries created by an
# external build triggered from this build file.
 set(flutter_rust_plugin_bundled_libraries
   &quot;$&amp;lt;TARGET_FILE:${CRATE_NAME}&amp;gt;&quot;
   PARENT_SCOPE
 )
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Here, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;$&amp;lt;TARGET_FILE:${CRATE_NAME}&amp;gt;&quot;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Don’t forget to declare support for windows in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt; file:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; plugin:
     platforms:
       android:
         package: com.example.flutter_rust_plugin
         pluginClass: FlutterRustPlugin
       windows:
         pluginClass: FlutterRustPluginCApi
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;integration-with-dart&quot;&gt;Integration with Dart&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.lib&lt;/code&gt; folder should have a similar structure (old plugin template):
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  ├── lib
      ├── bridge_generated.dart
      └── flutter_rust_plugin.dart
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge_generated.dart&lt;/code&gt; is a file generated using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_bridge_codegen&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_plugin.dart&lt;/code&gt; is the main plugin file. For more information on flutter plugin check out the official &lt;a href=&quot;https://docs.flutter.dev/development/packages-and-plugins/developing-packages&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_rust_plugin.dart&lt;/code&gt; file contains all methods that will be available in the plugin for the users. The libraries is loaded there. Here is an example of code used to load the libraries:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  static const base = 'rust_part';
  static final path = Platform.isWindows? '$base.dll' : 'lib$base.so';
  static late final dylib = Platform.isIOS
        ? DynamicLibrary.process()
        : Platform.isMacOS
        ? DynamicLibrary.executable()
        : DynamicLibrary.open(path);
    static late final api = RustPartImpl(dylib);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RustPartImpl&lt;/code&gt; is the name of the class in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge_generated.dart&lt;/code&gt;, the one class that extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FlutterRustBridgeBase&lt;/code&gt;. In order to call the method from library, use:&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-dart=&quot;&gt;await api.methodName();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;iOS: This tutorial was created using the official documentation of &lt;a href=&quot;http://cjycode.com/flutter_rust_bridge/integrate.html&quot;&gt;flutter_rust_bridge&lt;/a&gt; and &lt;a href=&quot;https://mozilla.github.io/firefox-browser-architecture/experiments/2017-09-06-rust-on-ios.html&quot;&gt;mozilla github post&lt;/a&gt;. If something is not clear, checking out these sources might help you.&lt;/li&gt;
  &lt;li&gt;Windows: This tutorial was created using the official documentation of &lt;a href=&quot;http://cjycode.com/flutter_rust_bridge/integrate.html&quot;&gt;flutter_rust_bridge&lt;/a&gt; and &lt;a href=&quot;https://github.com/mouEsam/rust_cryptor&quot;&gt;this&lt;/a&gt; proof of concept for Flutter+Rust plugin. If something is not clear, checking out these sources might help you.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The various angles of User Interfaces</title>
   <link href="/2022/09/22/the-various-angles-of-user-interfaces/"/>
   <updated>2022-09-22T20:38:32+00:00</updated>
   <id>/2022/09/22/the-various-angles-of-user-interfaces</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Since decades, especially the cinema industry tries to explore the concept of human being and machine seamless interaction. HAL 9000, J.A.R.V.I.S., to just name a few, they emerged to support human decision processes or simply to help execute them. Both of these AI’s used speech recognition and voice talk to communicate with humans. This is however not the only way to make the seamless interaction with a machine, but the only one that can be seen or heard (so the viewer can feel it using his senses) and at the same time that does not need any other peripheral device like keyboard or mouse. Not only that, it relies on the same sense as in human to human communication. From another angle, the most effective way for communication would be to make interactions by exchanging the “thoughts” straight from the human brain. It would be the fastest, sense-less approach.&lt;/p&gt;

&lt;p&gt;While the cinema industry is usually ahead with their ideas in comparison to the tech possibilities at a given time, ocasionally some become the reality. In the recent years a concept of a chatbot has been employed at scale by various industries. Chatbot is a trained algorithm, to support human decision processes and interacts via text or voice. Both can be translated into computer command and the result of executing it translated backwards into human language, either displayed or said. While this way of interacting with machine has still its drawbacks, it is much more pleasant and way more faster.&lt;/p&gt;

&lt;h2 id=&quot;express-the-intention&quot;&gt;Express the intention&lt;/h2&gt;

&lt;p&gt;To be properly understood by the other side while communicating, it is all about expressing intention by making clear statements. Humans tend to use contexts in discussions and are capable to grasp them, as opposed to machines. If the intention expression is however context-less, it is likely the machine will do what was intended by human. Being context-less is not a trivial task for humans, especially when context is present in almost any human to human interaction. It becomes an unnoticeable habit and yet, conversation parties understand each other. Humans have, however, yet another capability: they can adapt to the evironment boundaries, they can learn. Thus, while living in a context-rich environment, they have learned that digital space is different, more context-less oriented, especially while interacting with a machine and looking for an information. Search for information system capability is an excellent example. The more unambigious the intention expression is, the better quality the search results are. The search capability is fundamental as it may express various intentions. It can navigate through the information, distill the subset of an information or discover the unknown parts of the information. Therefore proper searching inherently becomes essential skill.&lt;/p&gt;

&lt;p&gt;A counter-example to the search capability of a system is the user interface (UI). UI’s emerged to organize the information in a pleasant way, so to help humans navigate through the diss-information. Categorize it, distill and order according to the needs and personal preferences. Make it easily accessible. Where amount of the information increases, however, the organization and navigation enters the complexity. The more information to maintain, the more burden to cope with. Apart from that, organization is usually a personal, so customizable property.&lt;/p&gt;

&lt;p&gt;While UI’s are the gateways to information management, they are opaque to what they are applied to. So whether this is an operating system (OS) UI, or just an extension to the OS, so the application, they tend to simplify management of the information. Important characteristics of the app is that it expresses an intention by providing service(s). Service can be anything that has the outcome of enriching the human needs, ie. buy a ticket.&lt;/p&gt;

&lt;p&gt;UI’s are the answer to weak system search capabilities problem. Systems with strong search capabilities may reduce the need for fat UI’s. Fat UI represents a state where the information management has been done in contradiction to the human needs. An overloaded/overbloated UI not only does not serve its purpose, but also reduces the pleasure of making any interaction with it.&lt;/p&gt;

&lt;p&gt;Expressing the intention involves human senses. Employing the senses create interactions through the underlying technology that is the gateway to digital world. This technology initially was able to provide “interface” solely for touch sense. Touch sense is however the least efficient, because it is time consuming activity to express the intention through employing it. It is now the time as it is evolving at scale towards more efficient senses like speech. Typing a sentence on a keyboard utilizing touch sense &lt;a href=&quot;https://news.stanford.edu/2016/08/24/stanford-study-speech-recognition-faster-texting/&quot;&gt;is three times slower&lt;/a&gt; than expressing it through human language along with speech recognition. It is likely the gap between these two will increase over time as the technology behind it becomes more mature. This is not the only gain, because if the touch sense is not involved, it can be occupied by another activities.&lt;/p&gt;

&lt;h2 id=&quot;the-overwhelmed-amount-of-surrounding-information&quot;&gt;The overwhelmed amount of surrounding information&lt;/h2&gt;

&lt;p&gt;Individuals on a daily basis interact with various type of services and the outcome of such interactions is usually more information to be managed. Whether this is aforementioned buying a ticket operation, pumping a car on a gas station, or even issuing an agreement with new trade partner, it all produces new information. If furthermore this done in a digital world, the outcome is not written on a piece of paper that can be stored in a desired place, at least initially. The digital world, however, offers similar mechanims to maintain the information. Operating systems and applications managed through UI’s have coined solutions that tend to mimic the real world. Files, an analogy to a piece of paper. Directory, an analogy to a catalog. It all helps in information organization and categorization. When done, it reduces the amount of time to actually search the information, to some extent. It is however always limited to the categorization problem. In other words to get the information that crosses the boundaries, or crosses multiple categories, much more steps need to be done to actually get the meaningful result. So to enter each category, check if it is there, go to next one and repeat. A time consuming process. Note there might be many categories and these are usually personal, so in other words what worked for one person, might not work the same way for another person. With the increasing amount of information and categories it invevitably ends up in diffculties while searching, because more and more activities need to be done.&lt;/p&gt;

&lt;p&gt;Consider such example:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A car owner wants to sell it. The buyer, so the new owner will demand a history of the car, including proof-of-provenance, insurance, all receipts from repairs, replacements etc. Although all this information is related to a car, it is not in primary relationship to a car. Insurance is a consequence of interacting with insurance company, receipts of repairs a result of interacting with car mechanic and so on. In many cases all this information has been delivered to the car owner via plain old email… While email box nicely aggregates information and provides search features, it is unfortunately context-less searching. In other words to find all the car related documents, car owner needs to provide some context, ie. mechanic name or his email, name of the insurance company or its email. Not only that, the current car owner needs to remember any type of document that is related to a car!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider another example:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Any company has to run bookkeeping, so every time period, ie. a month or quarter, a summary needs to be made and a tax paid. A summary, so a revenue (issued invoices) minus the operational costs that gives the income, a foundation to calculate the tax. Both, the revenue and operational costs are the consequence of company interactions with clients and suppliers. Interactions happen in many contexts and through various relationships. When the time comes, all the documents for tax calculation need to be collected. Sounds familiar? A very similar case to the previous example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While information categorization can be applied in various contexts, it will be always personal. A person in digital space can use email labels or tags, directory structure on hard(pen) drive, or have no organization at all. Note all these activities lead to UI’s and managing information through UI’s. As discussed above, UI’s serve their purpose for information management until they don’t. The following chart shows the relationship between amount of information to be managed and UI capabilities to handle it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/static/img/20220922/information_to_ui.png&quot;&gt;&lt;img src=&quot;/static/img/20220922/information_to_ui.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In other words in a contextual, cross category information searches, no UI will play well, as UI is limited by its primary strength – the information categorization behavior. The more information to be managed, the less effective UI becomes.&lt;/p&gt;

&lt;h3 id=&quot;app-ism--current-approach-to-information-management&quot;&gt;“app-ism” – current approach to information management&lt;/h3&gt;

&lt;p&gt;Any operating system (OS) relies on extensions, the applications (apps) that enrich the OS capabilities. Through them users can express their intent. By adding more capabilities, more information need to be managed or remembered. Cross category information searches are not possible, because apps do not expose proper interfaces for such activities. In fact, even if they would, the quality of such cross-boundary searches will lack the information contextuality. This is again the weak system search capabilities problem.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;User interfaces are powerful and flexible creatures that exist to make the human interactions with machines pleasant. This is however not always the most effective approach, especially in the information management problem that includes the search capability. User interfaces, by their nature will lack in complex, cross-boundary searches due to either missing information or context-less information.&lt;/p&gt;

&lt;p&gt;Systems that are capable to interact with humans by leveraging more human senses will have the prevalence over systems that rely on classic user interfaces – that involve only touch sense. At the same time, involving more senses will reduce the complexity of user interface. A well-searchable system that has strong search capabilities, along with speech recognition would certainly redefine the attitude to the need of user interface as it is framed today.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Software Interface Designer Manifesto</title>
   <link href="/2016/11/07/interface-designer-manifesto/"/>
   <updated>2016-11-07T21:38:32+00:00</updated>
   <id>/2016/11/07/interface-designer-manifesto</id>
   <content type="html">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A program without interface is just machine code. Machines understand everything tailored to language rules. They don’t care about interfaces, but humans do. &lt;em&gt;Interfaces are for humans&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interfaces are read many times more than are written. The weaker an interface is, the more diffcult it is to understand its intention. &lt;em&gt;Respect other humans&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Various tools, patterns and techniques may be utilised to create interface, but only human can blend it together with appropriate proportions. &lt;em&gt;That is a good interface&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interface designer doesn’t start on 09:00 am and stops 05:00 pm. Creative work is not a machine with on/off button. When the conditions are good, good interface will appear in 2 hours. When conditions are bad, 2 days may be insufficient to create a good one. Don’t push on it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creating interfaces, despite its science nature, is an art. Therefore may be described as beautiful or awful, good or bad, strong or weak or whatever adjective is suitable. Judging interfaces requires both, wisdom and experience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SOLID, TDD, DRY, CLEAN: they exist for a reason. &lt;em&gt;Mantaining good interfaces is a pleasure&lt;/em&gt;. Otherwise there’s always WTF.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Stats Whisper, the stats gatherer</title>
   <link href="/2016/01/27/meet-stats-whisper-the-stats-gatherer/"/>
   <updated>2016-01-27T19:50:40+00:00</updated>
   <id>/2016/01/27/meet-stats-whisper-the-stats-gatherer</id>
   <content type="html">&lt;p&gt;A few months ago I needed a simple tool that would gather certain app stats and integrate with our Rails apps easily. The underlying requirements were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;collect visits counter and/or response time of given part of app;&lt;/li&gt;
  &lt;li&gt;measure only certain (the most interesting) parts of app, e.g. concrete component or path, because the overall stats view is easily affordable with Google Analytics so additional toolset (collector, storage and visualization) sounds like an overhead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;meet-stats-whisper&quot;&gt;Meet Stats Whisper&lt;/h2&gt;

&lt;p&gt;So I’ve created the &lt;a href=&quot;https://github.com/Opensoftware/stats_whisper&quot;&gt;Stats Whisper&lt;/a&gt;, a simple data gatherer for &lt;a href=&quot;https://github.com/etsy/statsd&quot;&gt;StatsD&lt;/a&gt;. StatsD, because of &lt;a href=&quot;https://github.com/etsy/statsd/blob/master/docs/metric_types.md#counting&quot;&gt;counters&lt;/a&gt; and &lt;a href=&quot;https://github.com/etsy/statsd/blob/master/docs/metric_types.md#timing&quot;&gt;timers&lt;/a&gt; data types, support for UDP packets and Graphite integration – we’re using it internally as data storage.&lt;/p&gt;

&lt;p&gt;From Rails perspective, &lt;a href=&quot;https://github.com/Opensoftware/stats_whisper&quot;&gt;Stats Whisper&lt;/a&gt; is a middleware, which interacts with each request and gather data according to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whisper_config.yml&lt;/code&gt; config file. Currently it can only provide a whitelist of which requests – or parts of app – have to be measured (time of execution in ms and counters for each route). The whitelist consists of regular expressions, e.g: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^/dashboard&lt;/code&gt;, matching only interesting requests. The message is being sent to StatsD (via UDP port) immediately once the request is completed.&lt;/p&gt;

&lt;p&gt;It is essential to understand that the purpose of this library is to focus only on requests defined within &lt;em&gt;whitelist&lt;/em&gt;. All the remaining are skipped, because it aims to measure only the most interesting parts of app, e.g. a concrete component – lets say user dashboard, product, a set of products or whatever is important to unleash the business value. Generally speaking, it’s up to the end user, what to measure and why.&lt;/p&gt;

&lt;p&gt;The Stats Whisper library is not the only one on the market. I’m familiar with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Shopify/statsd-instrument/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statsd-instrument&lt;/code&gt;&lt;/a&gt;, that can measure any app method execution time or count the amount of method invocation so it works even closer to the app than Stats Whisper;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scoutapp/scout_statsd_rack&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scout_statsd_rack&lt;/code&gt;&lt;/a&gt; which measures execution time and count of requests of any app path – it’s not possible to specify only certain paths.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-word-about-stats-gathering&quot;&gt;A word about stats gathering&lt;/h2&gt;

&lt;p&gt;The aim of such measurements is to find anomalies that prevent the business from normal work. It is important to understand, what to measure and why. Start with critical components of your app, consider which parts might be the most important for the end user. The &lt;a href=&quot;https://github.com/Opensoftware/stats_whisper&quot;&gt;Stats Whisper&lt;/a&gt; library will help you gather appropriate statistics and identify bottlenecks. As an example, consider the chart shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/static/img/20160119/chart.png&quot;&gt;&lt;img src=&quot;/static/img/20160119/chart.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;understand-the-noise&quot;&gt;Understand the noise&lt;/h4&gt;

&lt;p&gt;“In average” (these quotes are on purpose) the response time is about 100ms per request, however sometimes it’s even order of magnitude bigger than the average. I’ve looked around and found that these peaks occur when user performs some search action, what was the bottleneck in this case.&lt;/p&gt;

&lt;p&gt;Regarding quoted average phrase, note how StatsD computes its statistics values, especially &lt;a href=&quot;https://github.com/etsy/statsd/blob/master/docs/metric_types.md#timing&quot;&gt;timing&lt;/a&gt; data type. Be careful with these params, because they may get you inaccurate results. I mean they’re completely solid, but consider what &lt;a href=&quot;http://devblog.mediamath.com/why-you-should-not-rely-on-statsd-for-monitoring-or-optimizing-response-time&quot;&gt;&lt;em&gt;mean&lt;/em&gt; or &lt;em&gt;max&lt;/em&gt; offer&lt;/a&gt; and how these may change your point of view.&lt;/p&gt;

&lt;h4 id=&quot;see-interactions-at-peak-performance&quot;&gt;See interactions at peak performance&lt;/h4&gt;

&lt;p&gt;Another useful part of app statistics data analysis is the ability to unveil peak performance periods and how they interact e.g. with crucial components of the system while such events occur. See the chart shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/static/img/20160119/chart2.png&quot;&gt;&lt;img src=&quot;/static/img/20160119/chart2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the real data gathered during students enrollments for elective courses. The enrollments started at 8 a.m. where the highest peak can be observed. Each student request response time has been measured and sent to StatsD counter and timer objects. The results are shown on first and second row. It’s worth noting that despite the peak performance, the upper (max value) of StatsD timer didn’t grew vast for main page and dashboard. I’ve also attached the CPU load avg to this chart to show it’s quite useless measurement, because note that it almost completely does not reflect the peak traffic – it does not tell you nothing about what is hapenning.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>DevOps in small companies – part II – entering automation</title>
   <link href="/2016/01/14/devops-in-small-companies-part-ii-entering-automation/"/>
   <updated>2016-01-14T16:24:53+00:00</updated>
   <id>/2016/01/14/devops-in-small-companies-part-ii-entering-automation</id>
   <content type="html">&lt;p&gt;A few months ago I’ve written &lt;a href=&quot;/2015/09/11/devops-in-small-companies-part-i/&quot;&gt;first post&lt;/a&gt; in this series and it seems it’s time to continue the discussion, because things didn’t stop. Not at all.&lt;/p&gt;

&lt;p&gt;The investment in configuration, or to be more specific, in automating things isn’t free. It depends on many factors, obviously, and here it was a compromise between &lt;em&gt;what needs to be done&lt;/em&gt; and &lt;em&gt;what could be done&lt;/em&gt;. In our case automation, configuration management (CM) or whatever in between was the second one. The world wouldn’t end while not having CM solutions on board. Especially here, where we don’t manage a farm of VM’s in a cloud environment and to be honest, where any action could be done &lt;em&gt;manually&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;even-though-you-manage-even-one-simple-vm-id-automate-this&quot;&gt;Even though you manage even one simple VM, I’d automate this&lt;/h3&gt;

&lt;p&gt;During last months we’ve done a lot in case of automation. We’ve also learned a lot, I mean not only the new tools, but the two–words I’d call ‘good practices’ in case of the overall environment management. We manage about 10 VM’s so it’s not much and these are in private University cluster. We’re not clouded with all of its pros and cons, but we try (or apply eventually) some cloud–solutions, e.g. we really value the cattle vs. kittens paradigm (covered in &lt;a href=&quot;/2015/09/11/devops-in-small-companies-part-i/#the-kittens-world&quot;&gt;first blog post&lt;/a&gt; of this series).&lt;/p&gt;

&lt;p&gt;Although we don’t manage big clusters or clouds, we managed some good practices that apply in any environment. We believe that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Any taken action closer to automation makes your environments less error–prone. It’s insanely important in any environment, whether you have a huge cluster or a single VM, because tools works fine until someone touches it, right? If so, don’t let anyone touch anything directly, automate it.&lt;/li&gt;
  &lt;li&gt;Any part of automated configuration is recreatable, repeatable, and so it’s testable! You can test whatever you want in a way however you want to before putting it into production environment.&lt;/li&gt;
  &lt;li&gt;Any part of automated configuration can be reused and applied within any other environment. These are so–called roles and you can re–use them for any environment you’d like to provision.&lt;/li&gt;
  &lt;li&gt;Automation standarizes your environment, either a huge cluster or a single VM. It encourages you or any other person in the team to do things in a specific way, so any other person after any period of time can handle this. Whether edit some config of important tool or just add another package to the system, it all lies in one place.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;automating-things-isnt-free&quot;&gt;Automating things isn’t free&lt;/h3&gt;

&lt;p&gt;Daily work still needs to be done, because automation isn’t a top priority. Having said that, most of the CM–related work we’ve made during spare time. Week after week another components joined to the “automated WALL·E family”. We’ve used Ansible as the CM–tool and I believe personally it was a good choice, because it simply let us do the job. We’ve also introduced a few tools to achieve simple CI and so we added Jenkins, which integrates with our Gerrit to perform code review so each Ansible change has been tested upon staging environment before merge into master branch. Furthermore, for any master branch merge, Gerrit triggered an event and so Jenkins would run production build. The complete process is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/20160114/opensoftware_CI.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;however-running-automated-things-is-so-dont-keep-dinosaurs&quot;&gt;However, running automated things, is so don’t keep dinosaurs&lt;/h3&gt;

&lt;p&gt;Once you’ve built automated configuration, your environments are no more pets or dinosaurs. They’re easily recreatable and configurable at scale if needed. However, the ‘scale’ word is not necessary here at all. Even having just a single VM, e.g. company developer tools VM, would be a good practice to &lt;a href=&quot;/2015/09/11/devops-in-small-companies-part-i/#where-shall-i-start&quot;&gt;clean it up&lt;/a&gt; and automate, because such VM’s become dinosaurs fast. Once the toolset has been installed, it’s better to not touch it at all, because who would ever remember why they’re exist in a such way.&lt;/p&gt;

&lt;p&gt;To give certain examples, we’ve entered automated configuration world and gather profits from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Standarization, where these old dinosaur–like VM’s again became manageable.&lt;/li&gt;
  &lt;li&gt;Changes testability, where each change can be tested before putting into prodution environment.&lt;/li&gt;
  &lt;li&gt;Recreatable environments, so we can forget about VM major system upgrade and instead create exactly the same VM, but with newer environment version – this is so–called zero downtime migration.&lt;/li&gt;
  &lt;li&gt;Monitoring things. It’s a shame to say that, but we weren’t monitor our services until that time. It’s quite interesting what metrics could tell you about particular service or the whole system. I mean, among other things, counting or measuring requests response time for certain views (actually it’s a topic for another blog post).&lt;/li&gt;
  &lt;li&gt;…each other, because all these configs, packages and other manageable things lie in one place and so anyone can enter the repository and see how exactly that thing has been performed or installed. It’s all way more transparent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t feel ashamed and start automating things today.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>First solution isn't always the smartest – a few thoughts about using Ansible</title>
   <link href="/2015/11/30/first-solution-isnt-always-the-smartest-a-few-thoughts-about-using-ansible/"/>
   <updated>2015-11-30T11:23:14+00:00</updated>
   <id>/2015/11/30/first-solution-isnt-always-the-smartest-a-few-thoughts-about-using-ansible</id>
   <content type="html">&lt;p&gt;Basically, this post is a continuation of &lt;a href=&quot;2015/10/09/why-we-dont-focus-on-testing-ansible-roles-extensively/&quot;&gt;Why we don’t focus on testing Ansible roles extensively&lt;/a&gt; and essentially touches &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; and expands, among other things, a few thoughts about using this tool within a CI environment.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-execution-time-of-ansible-playbook-takes-too-long&quot;&gt;The problem: execution time of Ansible playbook takes too long&lt;/h2&gt;

&lt;h4 id=&quot;the-context&quot;&gt;The context&lt;/h4&gt;
&lt;p&gt;Having a set of VM’s and several roles to execute, I’ve started to think how to shorten the execution time within the cluster.&lt;/p&gt;

&lt;h4 id=&quot;first-solution--extract-and-execute-only-the-code-thats-been-changed&quot;&gt;First solution – extract and execute only the code that’s been changed&lt;/h4&gt;
&lt;p&gt;As we use here a CI for Ansible, the first idea was to execute only the role that’s been changed. It sounds quite reasonable, because only concrete piece of playbook lifecycle is executed, without touching all the rest, unchanged. However, it works smootly until it concerns internal roles.
Let me explain the current solution for staging environment. What’s executed after a change is being pushed into repository, is distinguished with a piece of Bash script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git show &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;format:&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name-only&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GIT_COMMIT&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'roles/requirements.yml'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'roles\/'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $2}'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;paste&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt; -&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tags&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Running for tags: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tags&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  ansible-playbook &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tags&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; staging_inv site.yml
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Execute all stuff&lt;/span&gt;
  ansible-playbook &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; staging_inv site.yml
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In particular, it extracts what’s been changed from a Git tree and enforces to run build for concrete tags. These tags match role names, e.g. if any file of role &lt;em&gt;common&lt;/em&gt; has been changed, build executes only for role &lt;em&gt;common&lt;/em&gt;. Unfortunately, it shines until you add an external role. Given that, lets say the main directory playbook structure looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree ./ &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt;  1
├── ansible.cfg
├── files
├── group_vars
├── host_vars
├── roles
│   ├── ...
│   ├── requirements.yml
├── site.yml
└── staging_inv&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you add an external role, what you do – in most cases – is extending &lt;em&gt;*vars&lt;/em&gt; with some configuration variables related to the role and that’s all. It provides great flexibility for including additional roles, however it also reduces the possibility of extraction only certain roles to execute (based on the piece of code showed above). For such &lt;em&gt;nginx&lt;/em&gt; external role example, you’d only need to add some variables related to the role so the above extraction script wouldn’t match any code from within roles directory and hence, peform all tasks defined within a playbook.&lt;/p&gt;

&lt;h4 id=&quot;second-solution--build-a-wrapper-role&quot;&gt;Second solution – build a wrapper role&lt;/h4&gt;

&lt;p&gt;Any Ansible role may depend on any other role, where dependent roles are executed first. Role dependencies are given within host role &lt;em&gt;meta/main.yml&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ansible-role-nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The host role (one that’s having dependencies) would provide all essential variables for the dependent roles and it plays nicely. Basically, the nginx wrapper role looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree ./roles/nginx/ &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; 1
├── defaults
├── meta
├── tasks
└── vars&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;em&gt;vars&lt;/em&gt; provide common variables for &lt;em&gt;ansible-role-nginx&lt;/em&gt; role. The &lt;em&gt;common&lt;/em&gt; word is on purpose, because what if you’d like to deliver configuration for several nginx instances, where each instance differs slightly (e.g. is having different SSL cert)? The whole wrapper role plan crashes, because it needs to be distinguished somehow what plays where, so the solution would likely to use either &lt;em&gt;group&lt;/em&gt; or &lt;em&gt;host_ vars&lt;/em&gt;, whereas the extraction script doesn’t know anything about these directories (because they reside within playbook main dir).&lt;/p&gt;

&lt;p&gt;However, there’s a light for such approach, I mean using wrapper roles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;nginx&lt;/em&gt; role–case is quite unusual. In most cases it will be sufficient to use wrapper role &lt;em&gt;vars&lt;/em&gt; and define essential variables there.&lt;/li&gt;
  &lt;li&gt;External role common code has his own isolated environment with the ability to test it, using the above Bash script.&lt;/li&gt;
  &lt;li&gt;Wrapper role may include additional tasks and these are applied right after all dependent roles are applied. However, to apply pre–role tasks, different approach is needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-problem--applying-prerole-tasks-for-certain-role&quot;&gt;The problem – applying pre–role tasks for certain role&lt;/h2&gt;

&lt;h4 id=&quot;the-context-1&quot;&gt;The context&lt;/h4&gt;

&lt;p&gt;The current design of applying pre or post tasks of certain roles is limited to concrete &lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_roles.html#roles&quot;&gt;pre/post tasks&lt;/a&gt; defined within a playbook. Such approach, however, implies that playbook becomes both, the declaration and definition of roles and tasks, which sounds like a straight way of having a speghetti code.&lt;/p&gt;

&lt;h4 id=&quot;everything-should-be-roleized&quot;&gt;Everything should be roleized&lt;/h4&gt;

&lt;p&gt;Because it keeps your code clean and readable, no matter whether it’s a bunch of tasks or just one that creates a directory. Be consistent in what you do and that will cause profits. Instead of adding &lt;em&gt;pre_tasks&lt;/em&gt; to your playbook, create another role, e.g. &lt;em&gt;pre-nginx&lt;/em&gt; that simply creates cache directory or whatever is needed before role is executed.&lt;/p&gt;

&lt;h2 id=&quot;the-problem--complex-role-configuration-and-staying-dry&quot;&gt;The problem – complex role configuration and staying DRY&lt;/h2&gt;

&lt;h4 id=&quot;the-context-2&quot;&gt;The context&lt;/h4&gt;

&lt;p&gt;Lets say you have &lt;a href=&quot;https://github.com/jdauphant/ansible-role-nginx&quot;&gt;nginx&lt;/a&gt; role on board and it manages many Nginx instances. Some of them need various SSL certs or are working with different application servers. How to manage that and stay DRY?&lt;/p&gt;

&lt;h4 id=&quot;cheat-with-jinja2-features&quot;&gt;Cheat with Jinja2 features&lt;/h4&gt;

&lt;p&gt;Ansible uses YAML language for tasks definition and despite its simplicity, it has some limitations (e.g. config inheritance). Here comes &lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_filters.html&quot;&gt;Jinja2&lt;/a&gt; template language that would help in such cases. Let me explain it on an example, e.g. with this &lt;a href=&quot;https://github.com/jdauphant/ansible-role-nginx&quot;&gt;nginx&lt;/a&gt; role. The role is used upon the wrapper role pattern described above and contains:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# meta/main.yml&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ansible-role-nginx&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# vars/main.yml&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;common_conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;index index.html;&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;location /favicon.ico {&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;return 204;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;access_log     off;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;log_not_found  off;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;location /robots.txt {&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;alias ;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;nginx_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl_certificate_key /cert.key&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl_certificate     /cert.pem&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;upstream&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;upstream&lt;/span&gt; 

&lt;span class=&quot;na&quot;&gt;nginx_http_params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy_cache_path  /var/www/nginx-cache/  levels=1:2 keys_zone=one:10m inactive=7d  max_size=200m&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy_temp_path   /var/www/nginx-tmp/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, for a concrete host or group vars of your inventory, specify final configuration. Lets say you have &lt;em&gt;foo&lt;/em&gt; app and you’d like to provide config for &lt;em&gt;bar&lt;/em&gt; host that reside within your inventory file. Given that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# host_vars/bar/nginx.yml&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;root_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/www/foo/public/&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;location_app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;proxy_pass http://some_cluster;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;proxy_set_header X-Accel-Buffering no;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;


&lt;span class=&quot;na&quot;&gt;location_app_https&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location_app&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy_set_header X-Forwarded-Proto https;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;app_common_conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;server_name bar.example.com;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;root {{ root_dir }};&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;location / {&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;try_files $uri $uri/index.html $uri.html @app;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;nginx_sites&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;listen &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server_name 127.0.0.1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;location /status { allow 127.0.0.1; deny all; stub_status on; }&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;listen &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;common_conf&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{app_common_conf}}&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;location @app {&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ location_app }}&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app_ssl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;listen 443 ssl&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{common_conf}}&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{app_common_conf}}&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;location @app {&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;{{ location_app_https | join(&quot; &quot;) }}&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;na&quot;&gt;upstream&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;some_cluster { server unix:/var/www/foo/tmp/sockets/unicorn.sock fail_timeout=0; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And certs file, encrypted with &lt;em&gt;ansible-vault&lt;/em&gt; is given as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# host_vars/bar/cert.yml&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ssl_certs_privkey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;-----BEGIN CERTIFICATE-----&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;-----END CERTIFICATE-----&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;ssl_certs_cert&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;-----BEGIN PRIVATE KEY-----&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;-----END PRIVATE KEY-----&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/jdauphant/ansible-role-nginx&quot;&gt;nginx&lt;/a&gt; role doesn’t install SSL certs itself so it’s up to you how and where you’d like to put them. However, it might be simply achieved with these tasks, applied before nginx role:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ensure SSL folder exist&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;path={{ssl_certs_path}}&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;state=directory&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;owner=&quot;{{ssl_certs_path_owner}}&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;group=&quot;{{ssl_certs_path_group}}&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;mode=700&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Provide nginx SSL cert.pem&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;content=&quot;{{ ssl_certs_privkey }}&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;dest={{ssl_certs_path}}/cert.pem&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;owner=&quot;{{ssl_certs_path_owner}}&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;group=&quot;{{ssl_certs_path_group}}&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;mode=700&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Provide nginx SSL cert.key&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;content=&quot;{{ ssl_certs_cert }}&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;dest={{ssl_certs_path}}/cert.key&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;owner=&quot;{{ssl_certs_path_owner}}&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;group=&quot;{{ssl_certs_path_group}}&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;mode=700&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the difference between &lt;em&gt;&amp;gt;&lt;/em&gt; and &lt;em&gt;|&lt;/em&gt; in YAML. The former is the folded style and means that any newline in YAML will be replaced with space character, whereas the latter preserves newline character.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_filters.html&quot;&gt;Jinja2&lt;/a&gt; templates in conjunction of YAML features, provide great flexibility in config definition. However, as of Ansible 2.0, it’s likely that it will change slightly, because it will be possible to use Jinja2 &lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_filters.html#combining-hashes-dictionaries&quot;&gt;combine&lt;/a&gt; feature for merging hashes.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Why we don't focus on testing Ansible roles extensively</title>
   <link href="/2015/10/09/why-we-dont-focus-on-testing-ansible-roles-extensively/"/>
   <updated>2015-10-09T19:06:51+00:00</updated>
   <id>/2015/10/09/why-we-dont-focus-on-testing-ansible-roles-extensively</id>
   <content type="html">&lt;p&gt;We provision our environments with Ansible and we want these to be super–reliable. However, having sometimes several daily deployments, how to ensure that any change will not ruin the production environment? Some whisper to move to the containers world and get rid of the traditional way of provisioning/maintaining environments. Here, in the middle of major Ops changes, we use private cluster working on bare metal and so, we have slightly different requirements than the cloud world. We don’t use containers everywhere and we don’t have a plan to do so, at least within apps related context. As we provision with Ansible we want to be sure that any change will not cause any environment outage.&lt;/p&gt;

&lt;p&gt;Testing any CM tool is not a trivial task, because they essentially need an isolated environment to fire tests. It’s not just a matter of amount of RAM or CPU cycles, but primarily of having the dedicated environment the services need to operate. Moreover, as we use private cluster whereas we don’t manage it, we have just a bunch of VM’s we can use in whatever manner is needed, but still without any easy way to drop or spin up new VM.&lt;/p&gt;

&lt;h1 id=&quot;testing-ansible-changes&quot;&gt;Testing Ansible changes&lt;/h1&gt;

&lt;p&gt;The Ansible tool marvelously implements &lt;a href=&quot;http://garylarizza.com/blog/2014/02/17/puppet-workflow-part-2/&quot;&gt;roles–profiles&lt;/a&gt; pattern, which give us the ability to test any particular service in isolation – let’s call it as a service unit test. In Ansible terms, any service is simply a role that delivers some set of commands to ensure that service is up and running. Here, we can distinguish certain test levels criteria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Service is up and running on localhost.&lt;/li&gt;
  &lt;li&gt;Service talks to authorized clients.&lt;/li&gt;
  &lt;li&gt;Service delivers appropriate content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Testing the first level is often met by the role itself and since you’d use something out of the box, you’ve it included. Ansible has a bunch of predefined modules and another tons within Ansible Galaxy maintained by the vast community. Actually it’s very likely any tool you’d imagine to use has already well–prepared role ready for deployment.&lt;/p&gt;

&lt;p&gt;The next levels of tests are completely up to you, but you’d probably find, that it’s getting complicated fast, even for a small change, e.g. adding another web–VM instance within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hba.conf&lt;/code&gt; file to get access to PostgreSQL database. So we started to consider of having a CI for infrastructure provisioner, where:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The cost of environment preparation is relatively small.&lt;/li&gt;
  &lt;li&gt;Time of execution is as minimized as possible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having these assumptions defined, consider the schema below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/20151009/ansible_ci.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In short, when developer commits new change to Gerrit, Jenkins triggers new job for &lt;a href=&quot;https://github.com/test-kitchen/test-kitchen&quot;&gt;test–kitchen&lt;/a&gt; gem, which internally spawns Docker container(s) to perform change tests. Gem test–kitchen is able to establish more containers at once and run tests concurrently. To distinguish what roles have changed per commit:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git diff-tree &lt;span class=&quot;nt&quot;&gt;--no-commit-id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name-only&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; COMMIT_ID | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'roles\/'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve built an &lt;a href=&quot;https://github.com/blelump/garage/tree/master/ansible_docker_test_kitchen&quot;&gt;example&lt;/a&gt; of how to use test–kitchen with predefined Docker image where tests run in a matter of seconds. It really works great, but in context of role, not the whole system. The awesomeness disappear when you realize it’s not what you wanted to achieve, because in case of Ops – in my opinion – it’s more important to focus on integration tests to provide more customer oriented environment, e.g. at least to test if given service is running or responding instead of focusing if directory exists or config has changed.&lt;/p&gt;

&lt;p&gt;Indeed, if tests run per each role, it’s easy to spin up test environments and run tests fast thanks to containers. Such tests, however, have the drawback that they don’t give the value you’d expect – each role provides some service, but testing such single service without interaction with other services is quite meaningless. Nginx won’t serve appropriate content without interaction with some webserver and so, webserver won’t serve appropriate content without some database and so on.&lt;/p&gt;

&lt;p&gt;On the other hand, blending all Docker–Jenkins–whatever tools to build CI just for testing for Nginx availability on port 80 is like using a sledgehammer to crack a nut. So we decided to discontinue such process, because of the overhead of preparation test environments to gain valuable results.&lt;/p&gt;

&lt;h1 id=&quot;the-good-the-bad-and-the-ugly&quot;&gt;The good the bad and the ugly&lt;/h1&gt;

&lt;p&gt;Nonetheless, the idea of role–oriented tests is definitely worth looking at. With some investment in scripting and perhaps Docker Compose on board, it would spin the environment with services talking to each other, but it’s still an overhead to deal with. Besides, there’re also Docker containers limitations regarding changes in container networking or firewall (need extra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--privileged&lt;/code&gt; mode) and so they also should be discussed before entering containers.&lt;/p&gt;

&lt;p&gt;As for our CI environment, so far we’ve ended up with testing Ansible changes using flags &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--syntax-check --check&lt;/code&gt; on appropriate playbook from within Jenkins job and doing peer review.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>DevOps in small companies – part I – configuration management</title>
   <link href="/2015/09/11/devops-in-small-companies-part-i/"/>
   <updated>2015-09-11T17:41:09+00:00</updated>
   <id>/2015/09/11/devops-in-small-companies-part-i</id>
   <content type="html">&lt;p&gt;So you are a team of 3–5 and run a small company. You are happy with that and so we are. As we are commited to our deliverables, we need to do our job smoothly. We need appropriate tools for the right time to let the business run (and to make money, right?). Altough our teams are small and resources are limited, we still can improve our velocity. It’s actually inevitable if you want to stay on the market. Each such investment implies a non-zero cost, because of the learning curve etc. Thus it’s essential to invest in something valuable, that would keep us on the front – improve our throughput.&lt;/p&gt;

&lt;p&gt;This set of posts aims to be somewhat a guideline of how to improve deliverables, by applying DevOps culture in a small company, or in particular – the automation.&lt;/p&gt;

&lt;h2 id=&quot;overview-of-current-state&quot;&gt;Overview of current state&lt;/h2&gt;

&lt;p&gt;Did you hear about &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000043.html&quot;&gt;the Joel test&lt;/a&gt;? It’s quite old from the IT point of view, but still valid. As a matter of fact, it’s not an issue if you didn’t, because it’s somewhat a quality measurement, however very valuable, because it gives an overview of the current company state. So, how much points are you compliant with? Those twelve questions are the validator to help your business win so go and find them useful. Likewise, there are various aspects related to those questions and I’m going to touch some of them. In this case I mean managing the configuration.&lt;/p&gt;

&lt;h2 id=&quot;where-configuration-meets-automation&quot;&gt;Where configuration meets automation&lt;/h2&gt;

&lt;p&gt;Well, automation of provisioning the environment is not a new topic, because people are doing it for years or perhaps even decades. Bash, Perl or Python were predecessors, but in the last few years the topic evolved vast. Actually, you’re already at the gates of the Kingdom of Happiness even if you’re doing it with simple Bash script, e.g. to install Nginx, configure firewall or whatever is needed to deliver your app. It is, because you have some configuration process that let’s you provision the environment (or part of it) with reliability in any point of time.&lt;/p&gt;

&lt;p&gt;As the above process remains valid, today we have some nicer toys to play with configuration, e.g. Chef, Puppet, Ansible, Salt or even Packer (it slightly &lt;a href=&quot;https://groups.google.com/forum/#!msg/packer-tool/4lB4OqhILF8/NPoMYeew0sEJ&quot;&gt;differs&lt;/a&gt; from the others). These will help your company, because they push orchestration on completely new level of abstraction. OK, You’d say:&lt;/p&gt;

&lt;p&gt;– but I need only few tools to run my app – why should I care?&lt;/p&gt;

&lt;p&gt;– read below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/20150911/mortal_kombat.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-kittens-world&quot;&gt;The Kittens world&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kittens are pets. Each cute little kitten has a name, get stroked every day, have special food and needs including “cuddles”. Without constant attention your kittens will die. Common types of “kittens” are MSSQL databases, Sharepoint, Legacy apps and all Unix systems. Kitten class computing is expensive, stressful and time consuming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, often these &lt;a href=&quot;http://etherealmind.com/cattle-vs-kittens-on-cloud-platforms-no-one-hears-the-kittens-dying/&quot;&gt;Kittens&lt;/a&gt; are our production environments, which in case of any failure, results in a huge blow–up. To give an example, imagine you’re doing release upgrade on your Ubuntu LTS or just PostgreSQL version upgrade. Sure, you can put your app into maintenance mode and throw away all the users for a half day, but that’s not the case these days. Some call this approach the &lt;a href=&quot;https://www.thoughtworks.com/insights/blog/moving-to-phoenix-server-pattern-introduction&quot;&gt;Phoenix Server Pattern&lt;/a&gt; and some the &lt;a href=&quot;http://chadfowler.com/blog/2013/06/23/immutable-deployments/&quot;&gt;Immutable Deployments&lt;/a&gt;. The point is to deliver profits with immutability. Instead of doing Ubuntu release upgrade, throw it away and provision new VM with latest release.&lt;/p&gt;

&lt;h2 id=&quot;human-failure&quot;&gt;Human failure&lt;/h2&gt;

&lt;p&gt;It’s in our nature to make mistakes, however we can minimize them. Any process that brings some automation, also minimizes failure probability. Despite it’s an investment, it’s profitable.&lt;/p&gt;

&lt;p&gt;In the Rubyist world, there’s a tool called Bundler to manage dependencies. Bundler ensures that dependencies are consistent according to app needs. OSS world changes often and not always fluently to migrate from version X to Y. You need to manage these dependencies, e.g. to ensure version 1.2.3 of some dependency and 2.1.1 of some other. Bundler gives you extremely powerful engine to manage them and so CM tools give you the power to manage your environments. You always get the desired state.&lt;/p&gt;

&lt;h2 id=&quot;build-your-environment&quot;&gt;Build your environment&lt;/h2&gt;

&lt;p&gt;CM tools are somewhat like build tools, e.g. Maven or Gradle, but instead of getting the result as file or set of files, you get freshly baked environment. Baked according to the rules from Cookbooks (Chef), Manifests (Puppet) or Playbooks (Ansible).&lt;/p&gt;

&lt;p&gt;Any of these tools also offer extra level of abstraction to ensure maximum flexibility, but yet, organized in some manner. Having a set of VM’s, you can tell them to first configure some common context, e.g. a firewall or SSH, then a web–server, database, proxy or whatever is needed. For any given set of VM’s, you get &lt;em&gt;the desired state&lt;/em&gt;, with open ports 22 and 5432, but closed everything else. Then for any subset of these VM’s, installed web–server or database. Any defined rule is applied where it’s desired – for a node (VM), set of nodes or even set of subset of nodes. It’s all up to you how you manage it. There’re some common patterns, e.g define roles (nodes), which include profiles (a set of rules to configure given tool, e.g. nginx). For Puppet it’s &lt;a href=&quot;https://techpunch.co.uk/development/how-to-build-a-puppet-repo-using-r10k-with-roles-and-profiles&quot;&gt;roles–profiles&lt;/a&gt;, whereas with Ansible it’s somewhat enforced by default.&lt;/p&gt;

&lt;p&gt;It’s also worth noting that whatever rule you apply with desired CM tool, the applied rule is idempotent. It means that it will not apply firewall rules twice or more and mess with your setup, no matter how many times you’d apply that rule.&lt;/p&gt;

&lt;h2 id=&quot;keep-calm-and-scale&quot;&gt;Keep calm and scale&lt;/h2&gt;

&lt;p&gt;To some extent, it’s just fine to scale vertically, however the cons are that it requires extra machine reboot and sometimes might be just a waste of resources utilization. On the other hand, to scale horizontally, it’s essential to have new environment(s) prepared to the desired state. Sure, you’d use &lt;a href=&quot;http://www.agilesysadmin.net/imaging-or-configuration-management&quot;&gt;the golden image&lt;/a&gt; approach and scale just fine, but well, these days have passed. Just imagine a new library installation with golden image approach and you’re off of this idea. CM tools give us much more flexibility to handle such cases.&lt;/p&gt;

&lt;h2 id=&quot;where-shall-i-start&quot;&gt;Where shall I start?&lt;/h2&gt;

&lt;p&gt;Before you’ll start with anything, &lt;a href=&quot;https://www.scriptrock.com/automation-enterprise-devops-doing-it-wrong&quot;&gt;these below&lt;/a&gt; are your key points:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/20150911/drawing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In other words, gather requirements first. See how the business works and understand it, deeply. Now, blame me, but for me validation is just fine even if you do peer review as the underlying aim is not to overload ourselves. Then, finally, start playing with your desired tool. If you don’t have any, yet, go and find whatever would be useful for you. I’ve used Puppet for some time, but switched to Ansible then, because of simplicity. Puppet has his own Ruby–based DSL to write manifests and is built upon master–agent pattern in its basis. However, it implies that each node needs Puppet–agent installed and set up SSL certs so that master and agents can talk to each other. For better node management, Puppet has some third party tools to better utilize his capabilities, e.g. Hiera to manage global environment config (e.g. to apply Ruby version 2.1 on a subset of nodes), or R10K to deal with any sort of environments (e.g. dev or production). There’s one more caveat to Puppet, quite common actually – because of Puppet design, if there isn’t explicit rules (resources) hierarchy, Puppet would apply them in a random order, which may cause unexpected results. In order to prevent it, Puppet DSL implements dedicated ordering by setting &lt;a href=&quot;https://docs.puppetlabs.com/puppet/3.8/reference/lang_relationships.html&quot;&gt;relationships&lt;/a&gt; between resources.&lt;/p&gt;

&lt;p&gt;Ansible Playbooks on the other hand are YAML–based and top–bottom applied rules. It means first rule in Playbook is applied first, then second, then third etc. Besides, Ansible doesn’t implement master–agent architecture. Everything you need to run it on nodes is Python installed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-simplejson&lt;/code&gt; library. I claim Ansible has also shorter learning curve according to Puppet, more modules supported by the Core team or just better docs. I’ve prepared simple Puppet vs. Ansible &lt;a href=&quot;https://github.com/blelump/garage&quot;&gt;comparison&lt;/a&gt; (it needs Vagrant and VirtualBox) that simply configures SSH and firewall so you can play with both.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/20150911/mortal_kombat2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kill-your-kitten-and-see-what-happen&quot;&gt;Kill your Kitten and see what happen&lt;/h2&gt;

&lt;p&gt;The idea behind this post was to unveil that CM matters. Even if you’re tiny player on the market and spinning new apache installation twice a year or doing whatever library upgrade ever less once in a while, it might be a valuable investment. Just after a few years, maintaining such Kitten becomes a pain, because no one ever remember what was there and what for. Keep your environments lean and auto–configurable and you’ll notice the profit.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Yet another data migration problem</title>
   <link href="/2015/08/13/yet-another-data-migration-problem/"/>
   <updated>2015-08-13T11:19:28+00:00</updated>
   <id>/2015/08/13/yet-another-data-migration-problem</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; &lt;em&gt;Ensure data consistency while copying data across databases having RDBMS (PostgreSQL in this case) on board.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Imagine you have two databases, such a they’ve had the same parent in the past. As the time goes by, some of the data might change in any of them. Now, you’d like to copy object A between databases under assumption that it’s only going to create a copy if there’s no equal object in the destination database. The object might contain foreign keys and such associations are also considered during checking equality.&lt;/p&gt;

&lt;h3 id=&quot;considerations&quot;&gt;Considerations&lt;/h3&gt;

&lt;p&gt;The easiest solution you’d think of is dump the data you want and then restore in destination database. Such approach, however, implies that you’d need a tool taking only data you want to copy. Not the whole database or table, only object A with its associations. PostgreSQL provides &lt;a href=&quot;http://www.postgresql.org/docs/current/static/backup-dump.html&quot;&gt;pg_dump&lt;/a&gt; or &lt;a href=&quot;http://www.postgresql.org/docs/current/interactive/sql-copy.html&quot;&gt;copy&lt;/a&gt; for data migrations, however none of them lets you deal with associations easily. You’d then use some higher level tools, e.g. any ORM you like and deal with &lt;em&gt;deep&lt;/em&gt; object copy itself.&lt;/p&gt;

&lt;p&gt;To check for equality, you’d need some data to compare. The best candidate would be to compare record &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; and its foreign keys. In this case however, you’re guaranteed that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; in database X and Y points to the same record. They may differ and result in a mess.&lt;/p&gt;

&lt;h5 id=&quot;check-for-hashdatabase_xa--hashdatabase_ya&quot;&gt;Check for hash(database_X(A)) == hash(database_Y(A))&lt;/h5&gt;

&lt;p&gt;Another approach would be to calculate a hash of the data you’d like to compare and then use hashes instead of ids. So if the result matches, you’d not need to make a copy and for further operations, you’d just use record id.&lt;/p&gt;

&lt;h4 id=&quot;build-a-hash-of-record&quot;&gt;Build a hash of record&lt;/h4&gt;

&lt;p&gt;To build a hash, you’d add a trigger to your database with appropriate function, e.g:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plpgsql&quot; data-lang=&quot;plpgsql&quot;&gt;CREATE OR REPLACE FUNCTION update_post_footprint_func()
RETURNS trigger AS $$
DECLARE raw_footprint text;
BEGIN

raw_footprint := concat(NEW.title, NEW.content, NEW.owner_id);
NEW.footprint := (SELECT md5(raw_footprint));

RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_post_footprint BEFORE INSERT OR UPDATE ON posts FOR EACH ROW EXECUTE PROCEDURE update_post_footprint_func();&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Such function will build new hash for given record for each insert or update. As you’d notice, this use case considers only 1 x 1 relationship at most and doesn’t cover 1 x N. For instance, a post record might have many tags. In this case you have two choices, either select for footprints of the dependencies (note that it implies any dependency has its own footprint), e.g:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plpgsql&quot; data-lang=&quot;plpgsql&quot;&gt;raw_footprint := concat(...,
(select array_to_string(array(select footprint from tags where post_id = NEW.id order by id ASC), '|')));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or build parent footprint based on the dependency data, e.g:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plpgsql&quot; data-lang=&quot;plpgsql&quot;&gt;raw_footprint := concat(...,
(select array_to_string(array(select name from tags inner join post_tags on tags.id = post_tags.tag_id where post_tags.post_id = NEW.id order by id ASC), '|')));&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The footprint build process is somewhat similar to the &lt;a href=&quot;http://edgeguides.rubyonrails.org/caching_with_rails.html#russian-doll-caching&quot;&gt;Russian Doll&lt;/a&gt; caching pattern, despite you need to be aware that dependencies footprint must be built before the record footprint. However, it only applies when refering dependency footprints directly.&lt;/p&gt;

&lt;h3 id=&quot;possible-issues&quot;&gt;Possible issues&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Depending on the record dependencies, there might be a need to build a few/several triggers, where each generates sub-footprint, finally assembled with the main footprint.&lt;/li&gt;
  &lt;li&gt;The speed. Since each trigger execution is a non-zero time consuming operation, the need of using it should be further discussed and associated with the use case. If it’s going to be rarely used and data insertions/updates are heavy, perhaps it would be a better idea to use it within the app itself.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Yet another Phoenix failure</title>
   <link href="/2015/08/10/yet-another-phoenix-project/"/>
   <updated>2015-08-10T18:44:46+00:00</updated>
   <id>/2015/08/10/yet-another-phoenix-project</id>
   <content type="html">&lt;p&gt;As many of you, some time ago I’ve finished reading The Phoenix Project and no, I won’t write yet another review how good or bad is this book. However, it seems there’re two camps around, one loves the novel, and one hates. If you still aren’t a camper of any, come and join us. Perhaps you’ll learn something or just waste yet another several hours, not for the first time. Come and be a camper!&lt;/p&gt;

&lt;p&gt;I won’t write yet another review, but it seems there’re Phoenix projects everywhere or at least they look like such. Today is Monday and I wanted to do a bank transfer. No chance, it didn’t work. Such crucial bank service is not accessible all day and they still haven’t fixed it. Guess what, they performed a customer migration to a brand new platform with completely new UI, perhaps even better than the previous one. There’s just one thing, it doesn’t work. So I’ve tried to send a message through the system to tell them all the issues, but it also failed again and again.&lt;/p&gt;

&lt;p&gt;They spent probably thousands of hours working on a new platform, invested time and money and when it came to delivery time, it just failed. Of course they say they’re familiar with these issues and the whole IT department is working on it, but that’s not the case while everything is burning. I mean, it mustn’t never happen, especially if it’s a bank and there’s money involved.&lt;/p&gt;

&lt;p&gt;We all want to be IT professionals, but such things are still happening and I started pondering how come. Is it because of simple math and probability, because the internet now achieved the point it never been ever since and among thousands of online services, some of them must just fail? Is it because of the vast changes in IT so no one could understand it well? Is it because of IT people since they just don’t care? Finally, is it because of management pressure, because whatever is happening, the product must be delivered on time?&lt;/p&gt;

&lt;p&gt;Such app failure is not just a problem to solve. The point is, the whole migration process has failed and from customer point of view, new product is completely unusable, no matter how it look like or how well it is designed regarding UX best practices. The business can’t operate with such product.&lt;/p&gt;

&lt;p&gt;If you’re familiar with such situation, waste several hours and read The Phoenix Project.&lt;/p&gt;
</content>
 </entry>
 

</feed>
